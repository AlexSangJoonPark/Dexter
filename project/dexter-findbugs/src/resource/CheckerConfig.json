{
  "checkerSetList": [
    {
      "name": "VD",
      "description": "FindBugs Checker Sets for VD",
      "isActive": true,
      "checkerCategories": [
        {
          "code": "UR",
          "name": "UR",
          "description": "Uninitialized read of field in constructor",
          "isActive": true,
          "checkerList": [
            {
              "code": "ReadOfInstanceFieldInMethodInvokedByConstructorInSuperclass",
              "name": "edu.umd.cs.findbugs.detect.ReadOfInstanceFieldInMethodInvokedByConstructorInSuperclass",
              "severity": {
                "name": "info",
                "level": "INFO",
                "code": "ETC"
              },
              "version": {
                "major": 2,
                "minor": 0,
                "patch": 3
              },
              "description": "Uninitialized read of field method called from constructor of superclass\r\n",
              "isActive": false,
              "properties": [
                
              ],
              "cwe": 0
            },
            {
              "code": "FindUninitializedGet",
              "name": "edu.umd.cs.findbugs.detect.FindUninitializedGet",
              "severity": {
                "name": "info",
                "level": "INFO",
                "code": "ETC"
              },
              "version": {
                "major": 2,
                "minor": 0,
                "patch": 3
              },
              "description": "Uninitialized read of field in constructor\r\n",
              "isActive": false,
              "properties": [
                
              ],
              "cwe": 0
            }
          ],
          "filters": [
            
          ]
        },
        {
          "code": "HRS",
          "name": "HRS",
          "description": "HTTP cookie formed from untrusted input",
          "isActive": true,
          "checkerList": [
            {
              "code": "CrossSiteScripting",
              "name": "edu.umd.cs.findbugs.detect.CrossSiteScripting",
              "severity": {
                "name": "info",
                "level": "INFO",
                "code": "ETC"
              },
              "version": {
                "major": 2,
                "minor": 0,
                "patch": 3
              },
              "description": "HTTP cookie formed from untrusted input\r\nHTTP Response splitting vulnerability\r\nAbsolute path traversal in servlet\r\nRelative path traversal in servlet\r\nJSP reflected cross site scripting vulnerability\r\nServlet reflected cross site scripting vulnerability in error page\r\nServlet reflected cross site scripting vulnerability\r\n",
              "isActive": false,
              "properties": [
                
              ],
              "cwe": 0
            }
          ],
          "filters": [
            
          ]
        },
        {
          "code": "SBSC",
          "name": "SBSC",
          "description": "Method concatenates strings using + in a loop",
          "isActive": true,
          "checkerList": [
            {
              "code": "StringConcatenation",
              "name": "edu.umd.cs.findbugs.detect.StringConcatenation",
              "severity": {
                "name": "info",
                "level": "INFO",
                "code": "ETC"
              },
              "version": {
                "major": 2,
                "minor": 0,
                "patch": 3
              },
              "description": "Method concatenates strings using + in a loop\r\n",
              "isActive": false,
              "properties": [
                
              ],
              "cwe": 0
            }
          ],
          "filters": [
            
          ]
        },
        {
          "code": "DB",
          "name": "DB",
          "description": "Method uses the same code for two branches",
          "isActive": true,
          "checkerList": [
            {
              "code": "DuplicateBranches",
              "name": "edu.umd.cs.findbugs.detect.DuplicateBranches",
              "severity": {
                "name": "major",
                "level": "WARN",
                "code": "MAJ"
              },
              "version": {
                "major": 2,
                "minor": 0,
                "patch": 3
              },
              "description": "Method uses the same code for two branches\r\nMethod uses the same code for two switch clauses\r\n",
              "isActive": true,
              "properties": [
                
              ],
              "cwe": 0
            }
          ],
          "filters": [
            
          ]
        },
        {
          "code": "DC",
          "name": "DC",
          "description": "Possible double check of field",
          "isActive": true,
          "checkerList": [
            {
              "code": "FindDoubleCheck",
              "name": "edu.umd.cs.findbugs.detect.FindDoubleCheck",
              "severity": {
                "name": "info",
                "level": "INFO",
                "code": "ETC"
              },
              "version": {
                "major": 2,
                "minor": 0,
                "patch": 3
              },
              "description": "Possible double check of field\r\n",
              "isActive": true,
              "properties": [
                
              ],
              "cwe": 609
            }
          ],
          "filters": [
            
          ]
        },
        {
          "code": "UL",
          "name": "UL",
          "description": "Method does not release lock on all paths",
          "isActive": true,
          "checkerList": [
            {
              "code": "FindUnreleasedLock",
              "name": "edu.umd.cs.findbugs.detect.FindUnreleasedLock",
              "severity": {
                "name": "major",
                "level": "WARN",
                "code": "MAJ"
              },
              "version": {
                "major": 2,
                "minor": 0,
                "patch": 3
              },
              "description": "Method does not release lock on all paths\r\nMethod does not release lock on all exception paths\r\n",
              "isActive": true,
              "properties": [
                
              ],
              "cwe": 0
            }
          ],
          "filters": [
            
          ]
        },
        {
          "code": "UM",
          "name": "UM",
          "description": "Method calls static Math class method on a constant value",
          "isActive": true,
          "checkerList": [
            {
              "code": "UnnecessaryMath",
              "name": "edu.umd.cs.findbugs.detect.UnnecessaryMath",
              "severity": {
                "name": "info",
                "level": "INFO",
                "code": "ETC"
              },
              "version": {
                "major": 2,
                "minor": 0,
                "patch": 3
              },
              "description": "Method calls static Math class method on a constant value\r\n",
              "isActive": false,
              "properties": [
                
              ],
              "cwe": 0
            }
          ],
          "filters": [
            
          ]
        },
        {
          "code": "NOISE",
          "name": "NOISE",
          "description": "Bogus warning about a null pointer dereference",
          "isActive": true,
          "checkerList": [
            {
              "code": "Noise",
              "name": "edu.umd.cs.findbugs.detect.Noise",
              "severity": {
                "name": "info",
                "level": "INFO",
                "code": "ETC"
              },
              "version": {
                "major": 2,
                "minor": 0,
                "patch": 3
              },
              "description": "Bogus warning about a field reference\r\nBogus warning about a method call\r\nBogus warning about an operation\r\n",
              "isActive": false,
              "properties": [
                
              ],
              "cwe": 0
            },
            {
              "code": "NoiseNullDeref",
              "name": "edu.umd.cs.findbugs.detect.NoiseNullDeref",
              "severity": {
                "name": "info",
                "level": "INFO",
                "code": "ETC"
              },
              "version": {
                "major": 2,
                "minor": 0,
                "patch": 3
              },
              "description": "Bogus warning about a null pointer dereference\r\n",
              "isActive": false,
              "properties": [
                
              ],
              "cwe": 0
            }
          ],
          "filters": [
            
          ]
        },
        {
          "code": "Bx",
          "name": "Bx",
          "description": "Boxing/unboxing to parse a primitive",
          "isActive": true,
          "checkerList": [
            {
              "code": "DumbMethods",
              "name": "edu.umd.cs.findbugs.detect.DumbMethods",
              "severity": {
                "name": "info",
                "level": "INFO",
                "code": "ETC"
              },
              "version": {
                "major": 2,
                "minor": 0,
                "patch": 3
              },
              "description": "Equals method should not assume anything about the type of its argument\r\nBitwise add of signed byte value\r\nBitwise OR of signed byte value\r\nCan\u0027t use reflection to check for presence of annotation without runtime retention\r\nReversed method arguments\r\nBigDecimal constructed from double that isn\u0027t represented precisely\r\nhasNext method invokes next\r\nMaps and sets of URLs can be performance hogs\r\nD\u0027oh! A nonsensical method invocation\r\nFutile attempt to change max pool size of ScheduledThreadPoolExecutor\r\nDouble.longBitsToDouble invoked on an int\r\nRandom object created and used only once\r\nCreation of ScheduledThreadPoolExecutor with zero core threads\r\nThread passed where Runnable expected\r\nUseless/vacuous call to EasyMock method\r\nMethod invokes inefficient Boolean constructor; use Boolean.valueOf(...) instead\r\nBoxing/unboxing to parse a primitive\r\nMethod allocates a boxed primitive just to call toString\r\nConsider using Locale parameterized version of invoked method\r\nMethod invokes System.exit(...)\r\nExplicit garbage collection; extremely dubious except in benchmarking code\r\nMonitor wait() called on Condition\r\nMethod allocates an object, only to get the class object\r\nUse the nextInt method of Random rather than nextDouble to generate a random integer\r\nMethod invokes dangerous method runFinalizersOnExit\r\nMethod invokes inefficient new String(String) constructor\r\nMethod invokes toString() method on a String\r\nMethod invokes inefficient new String() constructor\r\nA thread was created using the default empty run method\r\nBad comparison of int value with long constant\r\nBad comparison of nonnegative value with negative constant\r\nBad comparison of signed byte\r\nInteger remainder modulo 1\r\nVacuous bit mask operation on integer value\r\nVacuous comparison of integer value\r\nImmediate dereference of the result of readLine()\r\nRandom value from 0 to 1 is coerced to the integer 0\r\nBad attempt to compute absolute value of signed 32-bit hashcode \r\nBad attempt to compute absolute value of signed random integer\r\nRemainder of hashCode could be negative\r\nRemainder of 32-bit signed random integer\r\nCertain swing methods needs to be invoked in Swing thread\r\n",
              "isActive": false,
              "properties": [
                
              ],
              "cwe": 0
            },
            {
              "code": "FindPuzzlers",
              "name": "edu.umd.cs.findbugs.detect.FindPuzzlers",
              "severity": {
                "name": "critical",
                "level": "ERROR",
                "code": "CRI"
              },
              "version": {
                "major": 2,
                "minor": 0,
                "patch": 3
              },
              "description": "Primitive value is boxed and then immediately unboxed\r\nPrimitive value is boxed then unboxed to perform primitive coercion\r\nPrimitive value is unboxed and coerced for ternary operator\r\nBoxed value is unboxed and then immediately reboxed\r\ncompareTo()/compare() returns Integer.MIN_VALUE\r\nUseless assignment in return statement\r\nOverwritten increment\r\nBad constant value for month\r\nAdding elements of an entry set may fail due to reuse of Entry objects\r\nInvocation of hashCode on an array\r\nInvocation of toString on an unnamed array\r\nInvocation of toString on an array\r\nInvocation of equals() on an array, which is equivalent to \u003d\u003d\r\n32 bit int shifted by an amount not in the range -31..31\r\nResult of integer multiplication cast to long\r\nUnsigned right shift cast to short/byte\r\nSuperclass uses subclass during initialization\r\nJUnit assertion in run method will not be noticed by JUnit\r\nComputation of average could overflow\r\nCheck for oddness that won\u0027t work for negative numbers \r\nInteger multiply of result of integer remainder\r\nDon\u0027t reuse entry objects in iterators\r\nNegating the result of compareTo()/compare()\r\n",
              "isActive": true,
              "properties": [
                
              ],
              "cwe": 0
            },
            {
              "code": "NumberConstructor",
              "name": "edu.umd.cs.findbugs.detect.NumberConstructor",
              "severity": {
                "name": "info",
                "level": "INFO",
                "code": "ETC"
              },
              "version": {
                "major": 2,
                "minor": 0,
                "patch": 3
              },
              "description": "Method invokes inefficient floating-point Number constructor; use static valueOf instead\r\nMethod invokes inefficient Number constructor; use static valueOf instead\r\n",
              "isActive": false,
              "properties": [
                
              ],
              "cwe": 0
            }
          ],
          "filters": [
            
          ]
        },
        {
          "code": "UI",
          "name": "UI",
          "description": "Usage of GetResource may be unsafe if class is extended",
          "isActive": true,
          "checkerList": [
            {
              "code": "InheritanceUnsafeGetResource",
              "name": "edu.umd.cs.findbugs.detect.InheritanceUnsafeGetResource",
              "severity": {
                "name": "info",
                "level": "INFO",
                "code": "ETC"
              },
              "version": {
                "major": 2,
                "minor": 0,
                "patch": 3
              },
              "description": "Usage of GetResource may be unsafe if class is extended\r\n",
              "isActive": false,
              "properties": [
                
              ],
              "cwe": 0
            }
          ],
          "filters": [
            
          ]
        },
        {
          "code": "BIT",
          "name": "BIT",
          "description": "Bitwise add of signed byte value",
          "isActive": true,
          "checkerList": [
            {
              "code": "DumbMethods",
              "name": "edu.umd.cs.findbugs.detect.DumbMethods",
              "severity": {
                "name": "info",
                "level": "INFO",
                "code": "ETC"
              },
              "version": {
                "major": 2,
                "minor": 0,
                "patch": 3
              },
              "description": "Equals method should not assume anything about the type of its argument\r\nBitwise add of signed byte value\r\nBitwise OR of signed byte value\r\nCan\u0027t use reflection to check for presence of annotation without runtime retention\r\nReversed method arguments\r\nBigDecimal constructed from double that isn\u0027t represented precisely\r\nhasNext method invokes next\r\nMaps and sets of URLs can be performance hogs\r\nD\u0027oh! A nonsensical method invocation\r\nFutile attempt to change max pool size of ScheduledThreadPoolExecutor\r\nDouble.longBitsToDouble invoked on an int\r\nRandom object created and used only once\r\nCreation of ScheduledThreadPoolExecutor with zero core threads\r\nThread passed where Runnable expected\r\nUseless/vacuous call to EasyMock method\r\nMethod invokes inefficient Boolean constructor; use Boolean.valueOf(...) instead\r\nBoxing/unboxing to parse a primitive\r\nMethod allocates a boxed primitive just to call toString\r\nConsider using Locale parameterized version of invoked method\r\nMethod invokes System.exit(...)\r\nExplicit garbage collection; extremely dubious except in benchmarking code\r\nMonitor wait() called on Condition\r\nMethod allocates an object, only to get the class object\r\nUse the nextInt method of Random rather than nextDouble to generate a random integer\r\nMethod invokes dangerous method runFinalizersOnExit\r\nMethod invokes inefficient new String(String) constructor\r\nMethod invokes toString() method on a String\r\nMethod invokes inefficient new String() constructor\r\nA thread was created using the default empty run method\r\nBad comparison of int value with long constant\r\nBad comparison of nonnegative value with negative constant\r\nBad comparison of signed byte\r\nInteger remainder modulo 1\r\nVacuous bit mask operation on integer value\r\nVacuous comparison of integer value\r\nImmediate dereference of the result of readLine()\r\nRandom value from 0 to 1 is coerced to the integer 0\r\nBad attempt to compute absolute value of signed 32-bit hashcode \r\nBad attempt to compute absolute value of signed random integer\r\nRemainder of hashCode could be negative\r\nRemainder of 32-bit signed random integer\r\nCertain swing methods needs to be invoked in Swing thread\r\n",
              "isActive": false,
              "properties": [
                
              ],
              "cwe": 0
            },
            {
              "code": "IncompatMask",
              "name": "edu.umd.cs.findbugs.detect.IncompatMask",
              "severity": {
                "name": "info",
                "level": "INFO",
                "code": "ETC"
              },
              "version": {
                "major": 2,
                "minor": 0,
                "patch": 3
              },
              "description": "Incompatible bit masks\r\nCheck to see if ((...) \u0026 0) \u003d\u003d 0\r\nIncompatible bit masks\r\nCheck for sign of bitwise operation\r\nCheck for sign of bitwise operation\r\n",
              "isActive": false,
              "properties": [
                
              ],
              "cwe": 0
            }
          ],
          "filters": [
            
          ]
        },
        {
          "code": "UG",
          "name": "UG",
          "description": "Unsynchronized get method, synchronized set method",
          "isActive": true,
          "checkerList": [
            {
              "code": "FindUnsyncGet",
              "name": "edu.umd.cs.findbugs.detect.FindUnsyncGet",
              "severity": {
                "name": "info",
                "level": "INFO",
                "code": "ETC"
              },
              "version": {
                "major": 2,
                "minor": 0,
                "patch": 3
              },
              "description": "Unsynchronized get method, synchronized set method\r\n",
              "isActive": false,
              "properties": [
                
              ],
              "cwe": 0
            }
          ],
          "filters": [
            
          ]
        },
        {
          "code": "LG",
          "name": "LG",
          "description": "Potential lost logger changes due to weak reference in OpenJDK",
          "isActive": true,
          "checkerList": [
            {
              "code": "LostLoggerDueToWeakReference",
              "name": "edu.umd.cs.findbugs.detect.LostLoggerDueToWeakReference",
              "severity": {
                "name": "info",
                "level": "INFO",
                "code": "ETC"
              },
              "version": {
                "major": 2,
                "minor": 0,
                "patch": 3
              },
              "description": "Potential lost logger changes due to weak reference in OpenJDK\r\n",
              "isActive": false,
              "properties": [
                
              ],
              "cwe": 0
            }
          ],
          "filters": [
            
          ]
        },
        {
          "code": "BAC",
          "name": "BAC",
          "description": "Bad Applet Constructor relies on uninitialized AppletStub",
          "isActive": true,
          "checkerList": [
            {
              "code": "BadAppletConstructor",
              "name": "edu.umd.cs.findbugs.detect.BadAppletConstructor",
              "severity": {
                "name": "info",
                "level": "INFO",
                "code": "ETC"
              },
              "version": {
                "major": 2,
                "minor": 0,
                "patch": 3
              },
              "description": "Bad Applet Constructor relies on uninitialized AppletStub\r\n",
              "isActive": false,
              "properties": [
                
              ],
              "cwe": 0
            }
          ],
          "filters": [
            
          ]
        },
        {
          "code": "CN",
          "name": "CN",
          "description": "Class implements Cloneable but does not define or use clone method",
          "isActive": true,
          "checkerList": [
            {
              "code": "CloneIdiom",
              "name": "edu.umd.cs.findbugs.detect.CloneIdiom",
              "severity": {
                "name": "critical",
                "level": "ERROR",
                "code": "CRI"
              },
              "version": {
                "major": 2,
                "minor": 0,
                "patch": 3
              },
              "description": "Class implements Cloneable but does not define or use clone method\r\nclone method does not call super.clone()\r\nClass defines clone() but doesn\u0027t implement Cloneable\r\n",
              "isActive": true,
              "properties": [
                
              ],
              "cwe": 0
            }
          ],
          "filters": [
            
          ]
        },
        {
          "code": "UrF",
          "name": "UrF",
          "description": "Unread field",
          "isActive": true,
          "checkerList": [
            {
              "code": "UnreadFields",
              "name": "edu.umd.cs.findbugs.detect.UnreadFields",
              "severity": {
                "name": "major",
                "level": "WARN",
                "code": "MAJ"
              },
              "version": {
                "major": 2,
                "minor": 0,
                "patch": 3
              },
              "description": "Read of unwritten field\r\nRead of unwritten public or protected field\r\nShould be a static inner class\r\nCould be refactored into a named static inner class\r\nCould be refactored into a static inner class\r\nDeadly embrace of non-static inner class and thread local\r\nUnread field: should this field be static?\r\nWrite to static field from instance method\r\nUnread field\r\nUnread public/protected field\r\nUnused field\r\nUnused public or protected field\r\nField not initialized in constructor but dereferenced without null check\r\nField only ever set to null\r\nUnwritten field\r\nUnwritten public or protected field\r\n",
              "isActive": true,
              "properties": [
                
              ],
              "cwe": 0
            }
          ],
          "filters": [
            
          ]
        },
        {
          "code": "LI",
          "name": "LI",
          "description": "Incorrect lazy initialization of static field",
          "isActive": true,
          "checkerList": [
            {
              "code": "LazyInit",
              "name": "edu.umd.cs.findbugs.detect.LazyInit",
              "severity": {
                "name": "major",
                "level": "WARN",
                "code": "MAJ"
              },
              "version": {
                "major": 2,
                "minor": 0,
                "patch": 3
              },
              "description": "Incorrect lazy initialization of static field\r\nIncorrect lazy initialization and update of static field\r\n",
              "isActive": true,
              "properties": [
                
              ],
              "cwe": 543
            }
          ],
          "filters": [
            
          ]
        },
        {
          "code": "CD",
          "name": "CD",
          "description": "Test for circular dependencies among classes",
          "isActive": true,
          "checkerList": [
            {
              "code": "FindCircularDependencies",
              "name": "edu.umd.cs.findbugs.detect.FindCircularDependencies",
              "severity": {
                "name": "info",
                "level": "INFO",
                "code": "ETC"
              },
              "version": {
                "major": 2,
                "minor": 0,
                "patch": 3
              },
              "description": "Test for circular dependencies among classes\r\n",
              "isActive": false,
              "properties": [
                
              ],
              "cwe": 0
            }
          ],
          "filters": [
            
          ]
        },
        {
          "code": "CI",
          "name": "CI",
          "description": "Class is final but declares protected field",
          "isActive": true,
          "checkerList": [
            {
              "code": "ConfusedInheritance",
              "name": "edu.umd.cs.findbugs.detect.ConfusedInheritance",
              "severity": {
                "name": "major",
                "level": "WARN",
                "code": "MAJ"
              },
              "version": {
                "major": 2,
                "minor": 0,
                "patch": 3
              },
              "description": "Class is final but declares protected field\r\n",
              "isActive": true,
              "properties": [
                
              ],
              "cwe": 0
            }
          ],
          "filters": [
            
          ]
        },
        {
          "code": "HSC",
          "name": "HSC",
          "description": "Huge string constants is duplicated across multiple class files",
          "isActive": true,
          "checkerList": [
            {
              "code": "HugeSharedStringConstants",
              "name": "edu.umd.cs.findbugs.detect.HugeSharedStringConstants",
              "severity": {
                "name": "info",
                "level": "INFO",
                "code": "ETC"
              },
              "version": {
                "major": 2,
                "minor": 0,
                "patch": 3
              },
              "description": "Huge string constants is duplicated across multiple class files\r\n",
              "isActive": false,
              "properties": [
                
              ],
              "cwe": 0
            }
          ],
          "filters": [
            
          ]
        },
        {
          "code": "TQ",
          "name": "TQ",
          "description": "Value annotated as carrying a type qualifier used where a value that must not carry that qualifier is required",
          "isActive": true,
          "checkerList": [
            {
              "code": "CheckTypeQualifiers",
              "name": "edu.umd.cs.findbugs.detect.CheckTypeQualifiers",
              "severity": {
                "name": "info",
                "level": "INFO",
                "code": "ETC"
              },
              "version": {
                "major": 2,
                "minor": 0,
                "patch": 3
              },
              "description": "Value annotated as carrying a type qualifier used where a value that must not carry that qualifier is required\r\nComparing values with incompatible type qualifiers\r\nValue required to have type qualifier, but marked as unknown\r\nValue required to not have type qualifier, but marked as unknown\r\nValue that might not carry a type qualifier is always used in a way requires that type qualifier\r\nValue that might carry a type qualifier is always used in a way prohibits it from having that type qualifier\r\nValue annotated as never carrying a type qualifier used where value carrying that qualifier is required\r\nValue without a type qualifier used where a value is required to have that qualifier\r\n",
              "isActive": false,
              "properties": [
                
              ],
              "cwe": 0
            }
          ],
          "filters": [
            
          ]
        },
        {
          "code": "IMA",
          "name": "IMA",
          "description": "Method accesses a private member variable of owning class",
          "isActive": true,
          "checkerList": [
            {
              "code": "InefficientMemberAccess",
              "name": "edu.umd.cs.findbugs.detect.InefficientMemberAccess",
              "severity": {
                "name": "info",
                "level": "INFO",
                "code": "ETC"
              },
              "version": {
                "major": 2,
                "minor": 0,
                "patch": 3
              },
              "description": "Method accesses a private member variable of owning class\r\n",
              "isActive": false,
              "properties": [
                
              ],
              "cwe": 0
            }
          ],
          "filters": [
            
          ]
        },
        {
          "code": "UPM",
          "name": "UPM",
          "description": "Private method is never called",
          "isActive": true,
          "checkerList": [
            {
              "code": "FindUncalledPrivateMethods",
              "name": "edu.umd.cs.findbugs.detect.FindUncalledPrivateMethods",
              "severity": {
                "name": "info",
                "level": "INFO",
                "code": "ETC"
              },
              "version": {
                "major": 2,
                "minor": 0,
                "patch": 3
              },
              "description": "Private method is never called\r\n",
              "isActive": true,
              "properties": [
                
              ],
              "cwe": 0
            }
          ],
          "filters": [
            
          ]
        },
        {
          "code": "XSS",
          "name": "XSS",
          "description": "JSP reflected cross site scripting vulnerability",
          "isActive": true,
          "checkerList": [
            {
              "code": "CrossSiteScripting",
              "name": "edu.umd.cs.findbugs.detect.CrossSiteScripting",
              "severity": {
                "name": "info",
                "level": "INFO",
                "code": "ETC"
              },
              "version": {
                "major": 2,
                "minor": 0,
                "patch": 3
              },
              "description": "HTTP cookie formed from untrusted input\r\nHTTP Response splitting vulnerability\r\nAbsolute path traversal in servlet\r\nRelative path traversal in servlet\r\nJSP reflected cross site scripting vulnerability\r\nServlet reflected cross site scripting vulnerability in error page\r\nServlet reflected cross site scripting vulnerability\r\n",
              "isActive": false,
              "properties": [
                
              ],
              "cwe": 0
            }
          ],
          "filters": [
            
          ]
        },
        {
          "code": "EC",
          "name": "EC",
          "description": "equals() used to compare array and nonarray",
          "isActive": true,
          "checkerList": [
            {
              "code": "FindRefComparison",
              "name": "edu.umd.cs.findbugs.detect.FindRefComparison",
              "severity": {
                "name": "critical",
                "level": "ERROR",
                "code": "CRI"
              },
              "version": {
                "major": 2,
                "minor": 0,
                "patch": 3
              },
              "description": "D\u0027oh! A nonsensical method invocation\r\nequals() used to compare array and nonarray\r\nInvocation of equals() on an array, which is equivalent to \u003d\u003d\r\nequals(...) used to compare incompatible arrays\r\nCall to equals(null)\r\nCall to equals() comparing unrelated class and interface\r\nCall to equals() comparing different interface types\r\nCall to equals() comparing different types\r\nUsing pointer equality to compare different types\r\nComparison of String parameter using \u003d\u003d or !\u003d\r\nComparison of String objects using \u003d\u003d or !\u003d\r\nSuspicious reference comparison\r\nSuspicious reference comparison to constant\r\nSuspicious reference comparison of Boolean values\r\n",
              "isActive": true,
              "properties": [
                
              ],
              "cwe": 0
            },
            {
              "code": "FindPuzzlers",
              "name": "edu.umd.cs.findbugs.detect.FindPuzzlers",
              "severity": {
                "name": "critical",
                "level": "ERROR",
                "code": "CRI"
              },
              "version": {
                "major": 2,
                "minor": 0,
                "patch": 3
              },
              "description": "Primitive value is boxed and then immediately unboxed\r\nPrimitive value is boxed then unboxed to perform primitive coercion\r\nPrimitive value is unboxed and coerced for ternary operator\r\nBoxed value is unboxed and then immediately reboxed\r\ncompareTo()/compare() returns Integer.MIN_VALUE\r\nUseless assignment in return statement\r\nOverwritten increment\r\nBad constant value for month\r\nAdding elements of an entry set may fail due to reuse of Entry objects\r\nInvocation of hashCode on an array\r\nInvocation of toString on an unnamed array\r\nInvocation of toString on an array\r\nInvocation of equals() on an array, which is equivalent to \u003d\u003d\r\n32 bit int shifted by an amount not in the range -31..31\r\nResult of integer multiplication cast to long\r\nUnsigned right shift cast to short/byte\r\nSuperclass uses subclass during initialization\r\nJUnit assertion in run method will not be noticed by JUnit\r\nComputation of average could overflow\r\nCheck for oddness that won\u0027t work for negative numbers \r\nInteger multiply of result of integer remainder\r\nDon\u0027t reuse entry objects in iterators\r\nNegating the result of compareTo()/compare()\r\n",
              "isActive": true,
              "properties": [
                
              ],
              "cwe": 0
            }
          ],
          "filters": [
            
          ]
        },
        {
          "code": "REC",
          "name": "REC",
          "description": "Exception is caught when Exception is not thrown",
          "isActive": true,
          "checkerList": [
            {
              "code": "RuntimeExceptionCapture",
              "name": "edu.umd.cs.findbugs.detect.RuntimeExceptionCapture",
              "severity": {
                "name": "info",
                "level": "INFO",
                "code": "ETC"
              },
              "version": {
                "major": 2,
                "minor": 0,
                "patch": 3
              },
              "description": "Exception is caught when Exception is not thrown\r\n",
              "isActive": false,
              "properties": [
                
              ],
              "cwe": 396
            }
          ],
          "filters": [
            
          ]
        },
        {
          "code": "Se",
          "name": "Se",
          "description": "Comparator doesn\u0027t implement Serializable",
          "isActive": true,
          "checkerList": [
            {
              "code": "ComparatorIdiom",
              "name": "edu.umd.cs.findbugs.detect.ComparatorIdiom",
              "severity": {
                "name": "info",
                "level": "INFO",
                "code": "ETC"
              },
              "version": {
                "major": 2,
                "minor": 0,
                "patch": 3
              },
              "description": "Comparator doesn\u0027t implement Serializable\r\n",
              "isActive": false,
              "properties": [
                
              ],
              "cwe": 0
            },
            {
              "code": "SerializableIdiom",
              "name": "edu.umd.cs.findbugs.detect.SerializableIdiom",
              "severity": {
                "name": "info",
                "level": "INFO",
                "code": "ETC"
              },
              "version": {
                "major": 2,
                "minor": 0,
                "patch": 3
              },
              "description": "Class\u0027s readObject() method is synchronized\r\nNon-transient non-serializable instance field in serializable class\r\nNon-serializable class has a serializable inner class\r\nNon-serializable value stored into instance field of a serializable class\r\nSerializable inner class\r\nMethod must be private in order for serialization to work\r\nserialVersionUID isn\u0027t final\r\nserialVersionUID isn\u0027t long\r\nserialVersionUID isn\u0027t static\r\nClass is Serializable, but doesn\u0027t define serialVersionUID\r\nClass is Serializable but its superclass doesn\u0027t define a void constructor\r\nClass is Externalizable but doesn\u0027t define a void constructor\r\nPrivate readResolve method not inherited by subclasses\r\nThe readResolve method must not be declared as a static method.  \r\nThe readResolve method must be declared with a return type of Object. \r\nTransient field that isn\u0027t set by deserialization. \r\nTransient field of class that isn\u0027t Serializable. \r\nClass\u0027s writeObject() method is synchronized but nothing else is\r\n",
              "isActive": false,
              "properties": [
                
              ],
              "cwe": 0
            }
          ],
          "filters": [
            
          ]
        },
        {
          "code": "TLW",
          "name": "TLW",
          "description": "Wait with two locks held",
          "isActive": true,
          "checkerList": [
            {
              "code": "FindTwoLockWait",
              "name": "edu.umd.cs.findbugs.detect.FindTwoLockWait",
              "severity": {
                "name": "info",
                "level": "INFO",
                "code": "ETC"
              },
              "version": {
                "major": 2,
                "minor": 0,
                "patch": 3
              },
              "description": "Wait with two locks held\r\n",
              "isActive": false,
              "properties": [
                
              ],
              "cwe": 0
            }
          ],
          "filters": [
            
          ]
        },
        {
          "code": "MF",
          "name": "MF",
          "description": "Class defines field that masks a superclass field",
          "isActive": true,
          "checkerList": [
            {
              "code": "FindMaskedFields",
              "name": "edu.umd.cs.findbugs.detect.FindMaskedFields",
              "severity": {
                "name": "info",
                "level": "INFO",
                "code": "ETC"
              },
              "version": {
                "major": 2,
                "minor": 0,
                "patch": 3
              },
              "description": "Class defines field that masks a superclass field\r\nMethod defines a variable that obscures a field\r\n",
              "isActive": true,
              "properties": [
                
              ],
              "cwe": 0
            }
          ],
          "filters": [
            
          ]
        },
        {
          "code": "Co",
          "name": "Co",
          "description": "Abstract class defines covariant compareTo() method",
          "isActive": true,
          "checkerList": [
            {
              "code": "FindPuzzlers",
              "name": "edu.umd.cs.findbugs.detect.FindPuzzlers",
              "severity": {
                "name": "critical",
                "level": "ERROR",
                "code": "CRI"
              },
              "version": {
                "major": 2,
                "minor": 0,
                "patch": 3
              },
              "description": "Primitive value is boxed and then immediately unboxed\r\nPrimitive value is boxed then unboxed to perform primitive coercion\r\nPrimitive value is unboxed and coerced for ternary operator\r\nBoxed value is unboxed and then immediately reboxed\r\ncompareTo()/compare() returns Integer.MIN_VALUE\r\nUseless assignment in return statement\r\nOverwritten increment\r\nBad constant value for month\r\nAdding elements of an entry set may fail due to reuse of Entry objects\r\nInvocation of hashCode on an array\r\nInvocation of toString on an unnamed array\r\nInvocation of toString on an array\r\nInvocation of equals() on an array, which is equivalent to \u003d\u003d\r\n32 bit int shifted by an amount not in the range -31..31\r\nResult of integer multiplication cast to long\r\nUnsigned right shift cast to short/byte\r\nSuperclass uses subclass during initialization\r\nJUnit assertion in run method will not be noticed by JUnit\r\nComputation of average could overflow\r\nCheck for oddness that won\u0027t work for negative numbers \r\nInteger multiply of result of integer remainder\r\nDon\u0027t reuse entry objects in iterators\r\nNegating the result of compareTo()/compare()\r\n",
              "isActive": true,
              "properties": [
                
              ],
              "cwe": 0
            },
            {
              "code": "FindHEmismatch",
              "name": "edu.umd.cs.findbugs.detect.FindHEmismatch",
              "severity": {
                "name": "critical",
                "level": "ERROR",
                "code": "CRI"
              },
              "version": {
                "major": 2,
                "minor": 0,
                "patch": 3
              },
              "description": "Abstract class defines covariant compareTo() method\r\nCovariant compareTo() method defined\r\nAbstract class defines covariant equals() method\r\nClass defines compareTo(...) and uses Object.equals()\r\nClass doesn\u0027t override equals in superclass\r\nCovariant equals() method defined for enum\r\nequals() method defined that doesn\u0027t override equals(Object)\r\nequals() method defined that doesn\u0027t override Object.equals(Object)\r\nCovariant equals() method defined\r\nCovariant equals() method defined, Object.equals(Object) inherited\r\nClass defines equals() but not hashCode()\r\nClass defines equals() and uses Object.hashCode()\r\nClass defines hashCode() but not equals()\r\nClass defines hashCode() and uses Object.equals()\r\nClass inherits equals() and uses Object.hashCode()\r\nSignature declares use of unhashable class in hashed construct\r\nUse of class without a hashCode() method in a hashed data structure\r\n",
              "isActive": true,
              "properties": [
                
              ],
              "cwe": 0
            }
          ],
          "filters": [
            
          ]
        },
        {
          "code": "DP",
          "name": "DP",
          "description": "Classloaders should only be created inside doPrivileged block",
          "isActive": true,
          "checkerList": [
            {
              "code": "DoInsideDoPrivileged",
              "name": "edu.umd.cs.findbugs.detect.DoInsideDoPrivileged",
              "severity": {
                "name": "major",
                "level": "WARN",
                "code": "MAJ"
              },
              "version": {
                "major": 2,
                "minor": 0,
                "patch": 3
              },
              "description": "Classloaders should only be created inside doPrivileged block\r\nMethod invoked that should be only be invoked inside a doPrivileged block\r\n",
              "isActive": true,
              "properties": [
                
              ],
              "cwe": 0
            }
          ],
          "filters": [
            
          ]
        },
        {
          "code": "ML",
          "name": "ML",
          "description": "Synchronization on field in futile attempt to guard that field",
          "isActive": true,
          "checkerList": [
            {
              "code": "SynchronizingOnContentsOfFieldToProtectField",
              "name": "edu.umd.cs.findbugs.detect.SynchronizingOnContentsOfFieldToProtectField",
              "severity": {
                "name": "critical",
                "level": "ERROR",
                "code": "CRI"
              },
              "version": {
                "major": 2,
                "minor": 0,
                "patch": 3
              },
              "description": "Synchronization on field in futile attempt to guard that field\r\n",
              "isActive": true,
              "properties": [
                
              ],
              "cwe": 0
            },
            {
              "code": "MutableLock",
              "name": "edu.umd.cs.findbugs.detect.MutableLock",
              "severity": {
                "name": "critical",
                "level": "ERROR",
                "code": "CRI"
              },
              "version": {
                "major": 2,
                "minor": 0,
                "patch": 3
              },
              "description": "Method synchronizes on an updated field\r\n",
              "isActive": true,
              "properties": [
                
              ],
              "cwe": 0
            }
          ],
          "filters": [
            
          ]
        },
        {
          "code": "SnVI",
          "name": "SnVI",
          "description": "Class is Serializable, but doesn\u0027t define serialVersionUID",
          "isActive": true,
          "checkerList": [
            {
              "code": "SerializableIdiom",
              "name": "edu.umd.cs.findbugs.detect.SerializableIdiom",
              "severity": {
                "name": "info",
                "level": "INFO",
                "code": "ETC"
              },
              "version": {
                "major": 2,
                "minor": 0,
                "patch": 3
              },
              "description": "Class\u0027s readObject() method is synchronized\r\nNon-transient non-serializable instance field in serializable class\r\nNon-serializable class has a serializable inner class\r\nNon-serializable value stored into instance field of a serializable class\r\nSerializable inner class\r\nMethod must be private in order for serialization to work\r\nserialVersionUID isn\u0027t final\r\nserialVersionUID isn\u0027t long\r\nserialVersionUID isn\u0027t static\r\nClass is Serializable, but doesn\u0027t define serialVersionUID\r\nClass is Serializable but its superclass doesn\u0027t define a void constructor\r\nClass is Externalizable but doesn\u0027t define a void constructor\r\nPrivate readResolve method not inherited by subclasses\r\nThe readResolve method must not be declared as a static method.  \r\nThe readResolve method must be declared with a return type of Object. \r\nTransient field that isn\u0027t set by deserialization. \r\nTransient field of class that isn\u0027t Serializable. \r\nClass\u0027s writeObject() method is synchronized but nothing else is\r\n",
              "isActive": false,
              "properties": [
                
              ],
              "cwe": 0
            }
          ],
          "filters": [
            
          ]
        },
        {
          "code": "DE",
          "name": "DE",
          "description": "Method might drop exception",
          "isActive": true,
          "checkerList": [
            {
              "code": "DroppedException",
              "name": "edu.umd.cs.findbugs.detect.DroppedException",
              "severity": {
                "name": "critical",
                "level": "ERROR",
                "code": "CRI"
              },
              "version": {
                "major": 2,
                "minor": 0,
                "patch": 3
              },
              "description": "Method might drop exception\r\nMethod might ignore exception\r\n",
              "isActive": true,
              "properties": [
                
              ],
              "cwe": 0
            }
          ],
          "filters": [
            
          ]
        },
        {
          "code": "DL",
          "name": "DL",
          "description": "Synchronization on Boolean",
          "isActive": true,
          "checkerList": [
            {
              "code": "SynchronizationOnSharedBuiltinConstant",
              "name": "edu.umd.cs.findbugs.detect.SynchronizationOnSharedBuiltinConstant",
              "severity": {
                "name": "critical",
                "level": "ERROR",
                "code": "CRI"
              },
              "version": {
                "major": 2,
                "minor": 0,
                "patch": 3
              },
              "description": "Synchronization on Boolean\r\nSynchronization on boxed primitive\r\nSynchronization on interned String \r\nSynchronization on boxed primitive values\r\n",
              "isActive": true,
              "properties": [
                
              ],
              "cwe": 0
            }
          ],
          "filters": [
            
          ]
        },
        {
          "code": "ST",
          "name": "ST",
          "description": "Write to static field from instance method",
          "isActive": true,
          "checkerList": [
            {
              "code": "UnreadFields",
              "name": "edu.umd.cs.findbugs.detect.UnreadFields",
              "severity": {
                "name": "major",
                "level": "WARN",
                "code": "MAJ"
              },
              "version": {
                "major": 2,
                "minor": 0,
                "patch": 3
              },
              "description": "Read of unwritten field\r\nRead of unwritten public or protected field\r\nShould be a static inner class\r\nCould be refactored into a named static inner class\r\nCould be refactored into a static inner class\r\nDeadly embrace of non-static inner class and thread local\r\nUnread field: should this field be static?\r\nWrite to static field from instance method\r\nUnread field\r\nUnread public/protected field\r\nUnused field\r\nUnused public or protected field\r\nField not initialized in constructor but dereferenced without null check\r\nField only ever set to null\r\nUnwritten field\r\nUnwritten public or protected field\r\n",
              "isActive": true,
              "properties": [
                
              ],
              "cwe": 0
            }
          ],
          "filters": [
            
          ]
        },
        {
          "code": "SW",
          "name": "SW",
          "description": "Certain swing methods needs to be invoked in Swing thread",
          "isActive": true,
          "checkerList": [
            {
              "code": "DumbMethods",
              "name": "edu.umd.cs.findbugs.detect.DumbMethods",
              "severity": {
                "name": "info",
                "level": "INFO",
                "code": "ETC"
              },
              "version": {
                "major": 2,
                "minor": 0,
                "patch": 3
              },
              "description": "Equals method should not assume anything about the type of its argument\r\nBitwise add of signed byte value\r\nBitwise OR of signed byte value\r\nCan\u0027t use reflection to check for presence of annotation without runtime retention\r\nReversed method arguments\r\nBigDecimal constructed from double that isn\u0027t represented precisely\r\nhasNext method invokes next\r\nMaps and sets of URLs can be performance hogs\r\nD\u0027oh! A nonsensical method invocation\r\nFutile attempt to change max pool size of ScheduledThreadPoolExecutor\r\nDouble.longBitsToDouble invoked on an int\r\nRandom object created and used only once\r\nCreation of ScheduledThreadPoolExecutor with zero core threads\r\nThread passed where Runnable expected\r\nUseless/vacuous call to EasyMock method\r\nMethod invokes inefficient Boolean constructor; use Boolean.valueOf(...) instead\r\nBoxing/unboxing to parse a primitive\r\nMethod allocates a boxed primitive just to call toString\r\nConsider using Locale parameterized version of invoked method\r\nMethod invokes System.exit(...)\r\nExplicit garbage collection; extremely dubious except in benchmarking code\r\nMonitor wait() called on Condition\r\nMethod allocates an object, only to get the class object\r\nUse the nextInt method of Random rather than nextDouble to generate a random integer\r\nMethod invokes dangerous method runFinalizersOnExit\r\nMethod invokes inefficient new String(String) constructor\r\nMethod invokes toString() method on a String\r\nMethod invokes inefficient new String() constructor\r\nA thread was created using the default empty run method\r\nBad comparison of int value with long constant\r\nBad comparison of nonnegative value with negative constant\r\nBad comparison of signed byte\r\nInteger remainder modulo 1\r\nVacuous bit mask operation on integer value\r\nVacuous comparison of integer value\r\nImmediate dereference of the result of readLine()\r\nRandom value from 0 to 1 is coerced to the integer 0\r\nBad attempt to compute absolute value of signed 32-bit hashcode \r\nBad attempt to compute absolute value of signed random integer\r\nRemainder of hashCode could be negative\r\nRemainder of 32-bit signed random integer\r\nCertain swing methods needs to be invoked in Swing thread\r\n",
              "isActive": false,
              "properties": [
                
              ],
              "cwe": 0
            }
          ],
          "filters": [
            
          ]
        },
        {
          "code": "SWL",
          "name": "SWL",
          "description": "Method calls Thread.sleep() with a lock held",
          "isActive": true,
          "checkerList": [
            {
              "code": "FindSleepWithLockHeld",
              "name": "edu.umd.cs.findbugs.detect.FindSleepWithLockHeld",
              "severity": {
                "name": "info",
                "level": "INFO",
                "code": "ETC"
              },
              "version": {
                "major": 2,
                "minor": 0,
                "patch": 3
              },
              "description": "Method calls Thread.sleep() with a lock held\r\n",
              "isActive": true,
              "properties": [
                
              ],
              "cwe": 0
            }
          ],
          "filters": [
            
          ]
        },
        {
          "code": "Ru",
          "name": "Ru",
          "description": "Invokes run on a thread (did you mean to start it instead?)",
          "isActive": true,
          "checkerList": [
            {
              "code": "FindRunInvocations",
              "name": "edu.umd.cs.findbugs.detect.FindRunInvocations",
              "severity": {
                "name": "info",
                "level": "INFO",
                "code": "ETC"
              },
              "version": {
                "major": 2,
                "minor": 0,
                "patch": 3
              },
              "description": "Invokes run on a thread (did you mean to start it instead?)\r\n",
              "isActive": false,
              "properties": [
                
              ],
              "cwe": 572
            }
          ],
          "filters": [
            
          ]
        },
        {
          "code": "SIO",
          "name": "SIO",
          "description": "Unnecessary type check done using instanceof operator",
          "isActive": true,
          "checkerList": [
            {
              "code": "SuperfluousInstanceOf",
              "name": "edu.umd.cs.findbugs.detect.SuperfluousInstanceOf",
              "severity": {
                "name": "info",
                "level": "INFO",
                "code": "ETC"
              },
              "version": {
                "major": 2,
                "minor": 0,
                "patch": 3
              },
              "description": "Unnecessary type check done using instanceof operator\r\n",
              "isActive": false,
              "properties": [
                
              ],
              "cwe": 0
            }
          ],
          "filters": [
            
          ]
        },
        {
          "code": "WS",
          "name": "WS",
          "description": "Class\u0027s writeObject() method is synchronized but nothing else is",
          "isActive": true,
          "checkerList": [
            {
              "code": "SerializableIdiom",
              "name": "edu.umd.cs.findbugs.detect.SerializableIdiom",
              "severity": {
                "name": "info",
                "level": "INFO",
                "code": "ETC"
              },
              "version": {
                "major": 2,
                "minor": 0,
                "patch": 3
              },
              "description": "Class\u0027s readObject() method is synchronized\r\nNon-transient non-serializable instance field in serializable class\r\nNon-serializable class has a serializable inner class\r\nNon-serializable value stored into instance field of a serializable class\r\nSerializable inner class\r\nMethod must be private in order for serialization to work\r\nserialVersionUID isn\u0027t final\r\nserialVersionUID isn\u0027t long\r\nserialVersionUID isn\u0027t static\r\nClass is Serializable, but doesn\u0027t define serialVersionUID\r\nClass is Serializable but its superclass doesn\u0027t define a void constructor\r\nClass is Externalizable but doesn\u0027t define a void constructor\r\nPrivate readResolve method not inherited by subclasses\r\nThe readResolve method must not be declared as a static method.  \r\nThe readResolve method must be declared with a return type of Object. \r\nTransient field that isn\u0027t set by deserialization. \r\nTransient field of class that isn\u0027t Serializable. \r\nClass\u0027s writeObject() method is synchronized but nothing else is\r\n",
              "isActive": false,
              "properties": [
                
              ],
              "cwe": 0
            }
          ],
          "filters": [
            
          ]
        },
        {
          "code": "FE",
          "name": "FE",
          "description": "Test for floating point equality",
          "isActive": true,
          "checkerList": [
            {
              "code": "FindFloatEquality",
              "name": "edu.umd.cs.findbugs.detect.FindFloatEquality",
              "severity": {
                "name": "critical",
                "level": "ERROR",
                "code": "CRI"
              },
              "version": {
                "major": 2,
                "minor": 0,
                "patch": 3
              },
              "description": "Test for floating point equality\r\nDoomed test for equality to NaN\r\n",
              "isActive": true,
              "properties": [
                
              ],
              "cwe": 0
            }
          ],
          "filters": [
            
          ]
        },
        {
          "code": "FB",
          "name": "FB",
          "description": "Missing expected or desired warning from FindBugs",
          "isActive": true,
          "checkerList": [
            {
              "code": "CheckExpectedWarnings",
              "name": "edu.umd.cs.findbugs.detect.CheckExpectedWarnings",
              "severity": {
                "name": "info",
                "level": "INFO",
                "code": "ETC"
              },
              "version": {
                "major": 2,
                "minor": 0,
                "patch": 3
              },
              "description": "Missing expected or desired warning from FindBugs\r\nUnexpected/undesired warning from FindBugs\r\n",
              "isActive": false,
              "properties": [
                
              ],
              "cwe": 0
            }
          ],
          "filters": [
            
          ]
        },
        {
          "code": "SQL",
          "name": "SQL",
          "description": "Nonconstant string passed to execute method on an SQL statement",
          "isActive": true,
          "checkerList": [
            {
              "code": "BadResultSetAccess",
              "name": "edu.umd.cs.findbugs.detect.BadResultSetAccess",
              "severity": {
                "name": "info",
                "level": "INFO",
                "code": "ETC"
              },
              "version": {
                "major": 2,
                "minor": 0,
                "patch": 3
              },
              "description": "Method attempts to access a prepared statement parameter with index 0\r\nMethod attempts to access a result set field with index 0\r\n",
              "isActive": true,
              "properties": [
                
              ],
              "cwe": 0
            },
            {
              "code": "FindSqlInjection",
              "name": "edu.umd.cs.findbugs.detect.FindSqlInjection",
              "severity": {
                "name": "info",
                "level": "INFO",
                "code": "ETC"
              },
              "version": {
                "major": 2,
                "minor": 0,
                "patch": 3
              },
              "description": "Nonconstant string passed to execute method on an SQL statement\r\nA prepared statement is generated from a nonconstant String\r\n",
              "isActive": true,
              "properties": [
                
              ],
              "cwe": 89
            }
          ],
          "filters": [
            
          ]
        },
        {
          "code": "MS",
          "name": "MS",
          "description": "May expose internal static state by storing a mutable object into a static field",
          "isActive": true,
          "checkerList": [
            {
              "code": "FindReturnRef",
              "name": "edu.umd.cs.findbugs.detect.FindReturnRef",
              "severity": {
                "name": "info",
                "level": "INFO",
                "code": "ETC"
              },
              "version": {
                "major": 2,
                "minor": 0,
                "patch": 3
              },
              "description": "May expose internal representation by returning reference to mutable object\r\nMay expose internal representation by incorporating reference to mutable object\r\nMay expose internal static state by storing a mutable object into a static field\r\nPublic static method may expose internal representation by returning array\r\n",
              "isActive": true,
              "properties": [
                
              ],
              "cwe": 0
            },
            {
              "code": "MutableStaticFields",
              "name": "edu.umd.cs.findbugs.detect.MutableStaticFields",
              "severity": {
                "name": "info",
                "level": "INFO",
                "code": "ETC"
              },
              "version": {
                "major": 2,
                "minor": 0,
                "patch": 3
              },
              "description": "Field isn\u0027t final and can\u0027t be protected from malicious code\r\nField should be both final and package protected\r\nField is a mutable array\r\nField is a mutable Hashtable\r\nField should be moved out of an interface and made package protected\r\nField should be package protected\r\nField isn\u0027t final but should be\r\nField isn\u0027t final but should be refactored to be so\r\n",
              "isActive": false,
              "properties": [
                
              ],
              "cwe": 0
            }
          ],
          "filters": [
            
          ]
        },
        {
          "code": "WL",
          "name": "WL",
          "description": "Synchronization on getClass rather than class literal",
          "isActive": true,
          "checkerList": [
            {
              "code": "SynchronizeOnClassLiteralNotGetClass",
              "name": "edu.umd.cs.findbugs.detect.SynchronizeOnClassLiteralNotGetClass",
              "severity": {
                "name": "info",
                "level": "INFO",
                "code": "ETC"
              },
              "version": {
                "major": 2,
                "minor": 0,
                "patch": 3
              },
              "description": "Synchronization on getClass rather than class literal\r\n",
              "isActive": false,
              "properties": [
                
              ],
              "cwe": 0
            }
          ],
          "filters": [
            
          ]
        },
        {
          "code": "RpC",
          "name": "RpC",
          "description": "Repeated conditional tests",
          "isActive": true,
          "checkerList": [
            {
              "code": "RepeatedConditionals",
              "name": "edu.umd.cs.findbugs.detect.RepeatedConditionals",
              "severity": {
                "name": "major",
                "level": "WARN",
                "code": "MAJ"
              },
              "version": {
                "major": 2,
                "minor": 0,
                "patch": 3
              },
              "description": "Repeated conditional tests\r\n",
              "isActive": true,
              "properties": [
                
              ],
              "cwe": 0
            }
          ],
          "filters": [
            
          ]
        },
        {
          "code": "ES",
          "name": "ES",
          "description": "Comparison of String parameter using \u003d\u003d or !\u003d",
          "isActive": true,
          "checkerList": [
            {
              "code": "FindRefComparison",
              "name": "edu.umd.cs.findbugs.detect.FindRefComparison",
              "severity": {
                "name": "critical",
                "level": "ERROR",
                "code": "CRI"
              },
              "version": {
                "major": 2,
                "minor": 0,
                "patch": 3
              },
              "description": "D\u0027oh! A nonsensical method invocation\r\nequals() used to compare array and nonarray\r\nInvocation of equals() on an array, which is equivalent to \u003d\u003d\r\nequals(...) used to compare incompatible arrays\r\nCall to equals(null)\r\nCall to equals() comparing unrelated class and interface\r\nCall to equals() comparing different interface types\r\nCall to equals() comparing different types\r\nUsing pointer equality to compare different types\r\nComparison of String parameter using \u003d\u003d or !\u003d\r\nComparison of String objects using \u003d\u003d or !\u003d\r\nSuspicious reference comparison\r\nSuspicious reference comparison to constant\r\nSuspicious reference comparison of Boolean values\r\n",
              "isActive": true,
              "properties": [
                
              ],
              "cwe": 0
            }
          ],
          "filters": [
            
          ]
        },
        {
          "code": "TEST",
          "name": "TEST",
          "description": "Testing",
          "isActive": true,
          "checkerList": [
            {
              "code": "TestingGround2",
              "name": "edu.umd.cs.findbugs.detect.TestingGround2",
              "severity": {
                "name": "info",
                "level": "INFO",
                "code": "ETC"
              },
              "version": {
                "major": 2,
                "minor": 0,
                "patch": 3
              },
              "description": "Testing\r\n",
              "isActive": false,
              "properties": [
                
              ],
              "cwe": 0
            },
            {
              "code": "TestASM",
              "name": "edu.umd.cs.findbugs.detect.TestASM",
              "severity": {
                "name": "info",
                "level": "INFO",
                "code": "ETC"
              },
              "version": {
                "major": 2,
                "minor": 0,
                "patch": 3
              },
              "description": "Testing\r\n",
              "isActive": false,
              "properties": [
                
              ],
              "cwe": 0
            },
            {
              "code": "TestingGround",
              "name": "edu.umd.cs.findbugs.detect.TestingGround",
              "severity": {
                "name": "info",
                "level": "INFO",
                "code": "ETC"
              },
              "version": {
                "major": 2,
                "minor": 0,
                "patch": 3
              },
              "description": "Testing\r\n",
              "isActive": false,
              "properties": [
                
              ],
              "cwe": 0
            }
          ],
          "filters": [
            
          ]
        },
        {
          "code": "NN",
          "name": "NN",
          "description": "Naked notify",
          "isActive": true,
          "checkerList": [
            {
              "code": "FindNakedNotify",
              "name": "edu.umd.cs.findbugs.detect.FindNakedNotify",
              "severity": {
                "name": "crc",
                "level": "WARN",
                "code": "CRC"
              },
              "version": {
                "major": 2,
                "minor": 0,
                "patch": 3
              },
              "description": "Naked notify\r\n",
              "isActive": true,
              "properties": [
                
              ],
              "cwe": 0
            }
          ],
          "filters": [
            
          ]
        },
        {
          "code": "J2EE",
          "name": "J2EE",
          "description": "Store of non serializable object into HttpSession",
          "isActive": true,
          "checkerList": [
            {
              "code": "FindNonSerializableStoreIntoSession",
              "name": "edu.umd.cs.findbugs.detect.FindNonSerializableStoreIntoSession",
              "severity": {
                "name": "major",
                "level": "WARN",
                "code": "MAJ"
              },
              "version": {
                "major": 2,
                "minor": 0,
                "patch": 3
              },
              "description": "Store of non serializable object into HttpSession\r\n",
              "isActive": true,
              "properties": [
                
              ],
              "cwe": 579
            },
            {
              "code": "FindUseOfNonSerializableValue",
              "name": "edu.umd.cs.findbugs.detect.FindUseOfNonSerializableValue",
              "severity": {
                "name": "info",
                "level": "INFO",
                "code": "ETC"
              },
              "version": {
                "major": 2,
                "minor": 0,
                "patch": 3
              },
              "description": "Non serializable object written to ObjectOutput\r\nStore of non serializable object into HttpSession\r\n",
              "isActive": false,
              "properties": [
                
              ],
              "cwe": 579
            }
          ],
          "filters": [
            
          ]
        },
        {
          "code": "SIC",
          "name": "SIC",
          "description": "Should be a static inner class",
          "isActive": true,
          "checkerList": [
            {
              "code": "UnreadFields",
              "name": "edu.umd.cs.findbugs.detect.UnreadFields",
              "severity": {
                "name": "major",
                "level": "WARN",
                "code": "MAJ"
              },
              "version": {
                "major": 2,
                "minor": 0,
                "patch": 3
              },
              "description": "Read of unwritten field\r\nRead of unwritten public or protected field\r\nShould be a static inner class\r\nCould be refactored into a named static inner class\r\nCould be refactored into a static inner class\r\nDeadly embrace of non-static inner class and thread local\r\nUnread field: should this field be static?\r\nWrite to static field from instance method\r\nUnread field\r\nUnread public/protected field\r\nUnused field\r\nUnused public or protected field\r\nField not initialized in constructor but dereferenced without null check\r\nField only ever set to null\r\nUnwritten field\r\nUnwritten public or protected field\r\n",
              "isActive": true,
              "properties": [
                
              ],
              "cwe": 0
            }
          ],
          "filters": [
            
          ]
        },
        {
          "code": "Dm",
          "name": "Dm",
          "description": "Call to unsupported method",
          "isActive": true,
          "checkerList": [
            {
              "code": "DumbMethods",
              "name": "edu.umd.cs.findbugs.detect.DumbMethods",
              "severity": {
                "name": "info",
                "level": "INFO",
                "code": "ETC"
              },
              "version": {
                "major": 2,
                "minor": 0,
                "patch": 3
              },
              "description": "Equals method should not assume anything about the type of its argument\r\nBitwise add of signed byte value\r\nBitwise OR of signed byte value\r\nCan\u0027t use reflection to check for presence of annotation without runtime retention\r\nReversed method arguments\r\nBigDecimal constructed from double that isn\u0027t represented precisely\r\nhasNext method invokes next\r\nMaps and sets of URLs can be performance hogs\r\nD\u0027oh! A nonsensical method invocation\r\nFutile attempt to change max pool size of ScheduledThreadPoolExecutor\r\nDouble.longBitsToDouble invoked on an int\r\nRandom object created and used only once\r\nCreation of ScheduledThreadPoolExecutor with zero core threads\r\nThread passed where Runnable expected\r\nUseless/vacuous call to EasyMock method\r\nMethod invokes inefficient Boolean constructor; use Boolean.valueOf(...) instead\r\nBoxing/unboxing to parse a primitive\r\nMethod allocates a boxed primitive just to call toString\r\nConsider using Locale parameterized version of invoked method\r\nMethod invokes System.exit(...)\r\nExplicit garbage collection; extremely dubious except in benchmarking code\r\nMonitor wait() called on Condition\r\nMethod allocates an object, only to get the class object\r\nUse the nextInt method of Random rather than nextDouble to generate a random integer\r\nMethod invokes dangerous method runFinalizersOnExit\r\nMethod invokes inefficient new String(String) constructor\r\nMethod invokes toString() method on a String\r\nMethod invokes inefficient new String() constructor\r\nA thread was created using the default empty run method\r\nBad comparison of int value with long constant\r\nBad comparison of nonnegative value with negative constant\r\nBad comparison of signed byte\r\nInteger remainder modulo 1\r\nVacuous bit mask operation on integer value\r\nVacuous comparison of integer value\r\nImmediate dereference of the result of readLine()\r\nRandom value from 0 to 1 is coerced to the integer 0\r\nBad attempt to compute absolute value of signed 32-bit hashcode \r\nBad attempt to compute absolute value of signed random integer\r\nRemainder of hashCode could be negative\r\nRemainder of 32-bit signed random integer\r\nCertain swing methods needs to be invoked in Swing thread\r\n",
              "isActive": false,
              "properties": [
                
              ],
              "cwe": 0
            },
            {
              "code": "DumbMethodInvocations",
              "name": "edu.umd.cs.findbugs.detect.DumbMethodInvocations",
              "severity": {
                "name": "info",
                "level": "INFO",
                "code": "ETC"
              },
              "version": {
                "major": 2,
                "minor": 0,
                "patch": 3
              },
              "description": "Hardcoded constant database password\r\nEmpty database password\r\nCode contains a hard coded reference to an absolute pathname\r\nInvocation of substring(0), which returns the original value\r\n",
              "isActive": false,
              "properties": [
                
              ],
              "cwe": 0
            },
            {
              "code": "DefaultEncodingDetector",
              "name": "edu.umd.cs.findbugs.detect.DefaultEncodingDetector",
              "severity": {
                "name": "info",
                "level": "INFO",
                "code": "ETC"
              },
              "version": {
                "major": 2,
                "minor": 0,
                "patch": 3
              },
              "description": "Reliance on default encoding\r\n",
              "isActive": false,
              "properties": [
                
              ],
              "cwe": 0
            },
            {
              "code": "CallToUnsupportedMethod",
              "name": "edu.umd.cs.findbugs.detect.CallToUnsupportedMethod",
              "severity": {
                "name": "info",
                "level": "INFO",
                "code": "ETC"
              },
              "version": {
                "major": 2,
                "minor": 0,
                "patch": 3
              },
              "description": "Call to unsupported method\r\n",
              "isActive": false,
              "properties": [
                
              ],
              "cwe": 0
            },
            {
              "code": "URLProblems",
              "name": "edu.umd.cs.findbugs.detect.URLProblems",
              "severity": {
                "name": "info",
                "level": "INFO",
                "code": "ETC"
              },
              "version": {
                "major": 2,
                "minor": 0,
                "patch": 3
              },
              "description": "The equals and hashCode methods of URL are blocking\r\nMaps and sets of URLs can be performance hogs\r\n",
              "isActive": false,
              "properties": [
                
              ],
              "cwe": 0
            }
          ],
          "filters": [
            
          ]
        },
        {
          "code": "EI",
          "name": "EI",
          "description": "May expose internal representation by returning reference to mutable object",
          "isActive": true,
          "checkerList": [
            {
              "code": "FindReturnRef",
              "name": "edu.umd.cs.findbugs.detect.FindReturnRef",
              "severity": {
                "name": "info",
                "level": "INFO",
                "code": "ETC"
              },
              "version": {
                "major": 2,
                "minor": 0,
                "patch": 3
              },
              "description": "May expose internal representation by returning reference to mutable object\r\nMay expose internal representation by incorporating reference to mutable object\r\nMay expose internal static state by storing a mutable object into a static field\r\nPublic static method may expose internal representation by returning array\r\n",
              "isActive": true,
              "properties": [
                
              ],
              "cwe": 0
            }
          ],
          "filters": [
            
          ]
        },
        {
          "code": "ODR",
          "name": "ODR",
          "description": "Method may fail to close database resource",
          "isActive": true,
          "checkerList": [
            {
              "code": "FindOpenStream",
              "name": "edu.umd.cs.findbugs.detect.FindOpenStream",
              "severity": {
                "name": "info",
                "level": "INFO",
                "code": "ETC"
              },
              "version": {
                "major": 2,
                "minor": 0,
                "patch": 3
              },
              "description": "Method may fail to close database resource\r\nMethod may fail to close database resource on exception\r\nMethod may fail to close stream\r\nMethod may fail to close stream on exception\r\n",
              "isActive": true,
              "properties": [
                
              ],
              "cwe": 0
            }
          ],
          "filters": [
            
          ]
        },
        {
          "code": "VO",
          "name": "VO",
          "description": "An increment to a volatile field isn\u0027t atomic",
          "isActive": true,
          "checkerList": [
            {
              "code": "VolatileUsage",
              "name": "edu.umd.cs.findbugs.detect.VolatileUsage",
              "severity": {
                "name": "info",
                "level": "INFO",
                "code": "ETC"
              },
              "version": {
                "major": 2,
                "minor": 0,
                "patch": 3
              },
              "description": "An increment to a volatile field isn\u0027t atomic\r\nA volatile reference to an array doesn\u0027t treat the array elements as volatile\r\n",
              "isActive": false,
              "properties": [
                
              ],
              "cwe": 0
            }
          ],
          "filters": [
            
          ]
        },
        {
          "code": "VR",
          "name": "VR",
          "description": "Class makes reference to unresolvable class or method",
          "isActive": true,
          "checkerList": [
            {
              "code": "ResolveAllReferences",
              "name": "edu.umd.cs.findbugs.detect.ResolveAllReferences",
              "severity": {
                "name": "info",
                "level": "INFO",
                "code": "ETC"
              },
              "version": {
                "major": 2,
                "minor": 0,
                "patch": 3
              },
              "description": "Class makes reference to unresolvable class or method\r\n",
              "isActive": false,
              "properties": [
                
              ],
              "cwe": 0
            }
          ],
          "filters": [
            
          ]
        },
        {
          "code": "DLS",
          "name": "DLS",
          "description": "Useless increment in return statement",
          "isActive": true,
          "checkerList": [
            {
              "code": "FindDeadLocalStores",
              "name": "edu.umd.cs.findbugs.detect.FindDeadLocalStores",
              "severity": {
                "name": "major",
                "level": "WARN",
                "code": "MAJ"
              },
              "version": {
                "major": 2,
                "minor": 0,
                "patch": 3
              },
              "description": "Useless increment in return statement\r\nDead store to local variable\r\nDead store of null to local variable\r\nDead store to local variable that shadows field\r\nDead store of class literal\r\nA parameter is dead upon entry to a method but overwritten\r\n",
              "isActive": true,
              "properties": [
                
              ],
              "cwe": 563
            },
            {
              "code": "FindPuzzlers",
              "name": "edu.umd.cs.findbugs.detect.FindPuzzlers",
              "severity": {
                "name": "critical",
                "level": "ERROR",
                "code": "CRI"
              },
              "version": {
                "major": 2,
                "minor": 0,
                "patch": 3
              },
              "description": "Primitive value is boxed and then immediately unboxed\r\nPrimitive value is boxed then unboxed to perform primitive coercion\r\nPrimitive value is unboxed and coerced for ternary operator\r\nBoxed value is unboxed and then immediately reboxed\r\ncompareTo()/compare() returns Integer.MIN_VALUE\r\nUseless assignment in return statement\r\nOverwritten increment\r\nBad constant value for month\r\nAdding elements of an entry set may fail due to reuse of Entry objects\r\nInvocation of hashCode on an array\r\nInvocation of toString on an unnamed array\r\nInvocation of toString on an array\r\nInvocation of equals() on an array, which is equivalent to \u003d\u003d\r\n32 bit int shifted by an amount not in the range -31..31\r\nResult of integer multiplication cast to long\r\nUnsigned right shift cast to short/byte\r\nSuperclass uses subclass during initialization\r\nJUnit assertion in run method will not be noticed by JUnit\r\nComputation of average could overflow\r\nCheck for oddness that won\u0027t work for negative numbers \r\nInteger multiply of result of integer remainder\r\nDon\u0027t reuse entry objects in iterators\r\nNegating the result of compareTo()/compare()\r\n",
              "isActive": true,
              "properties": [
                
              ],
              "cwe": 0
            }
          ],
          "filters": [
            
          ]
        },
        {
          "code": "C",
          "name": "CORRECTNESS",
          "isActive": true,
          "checkerList": [
            {
              "code": "InitializeNonnullFieldsInConstructor",
              "name": "edu.umd.cs.findbugs.detect.InitializeNonnullFieldsInConstructor",
              "severity": {
                "name": "critical",
                "level": "ERROR",
                "code": "CRI"
              },
              "version": {
                "major": 2,
                "minor": 0,
                "patch": 3
              },
              "description": "Nonnull field is not initialized\r\n",
              "isActive": true,
              "properties": [
                
              ],
              "cwe": 0
            }
          ],
          "filters": [
            
          ]
        },
        {
          "code": "GC",
          "name": "GC",
          "description": "Unchecked type in generic call",
          "isActive": true,
          "checkerList": [
            {
              "code": "FindUnrelatedTypesInGenericContainer",
              "name": "edu.umd.cs.findbugs.detect.FindUnrelatedTypesInGenericContainer",
              "severity": {
                "name": "info",
                "level": "INFO",
                "code": "ETC"
              },
              "version": {
                "major": 2,
                "minor": 0,
                "patch": 3
              },
              "description": "Collections should not contain themselves\r\nDon\u0027t use removeAll to clear a collection\r\nVacuous call to collections\r\nUnchecked type in generic call\r\nNo relationship between generic parameter and method argument\r\n",
              "isActive": false,
              "properties": [
                
              ],
              "cwe": 0
            }
          ],
          "filters": [
            
          ]
        },
        {
          "code": "D",
          "name": "STYLE",
          "isActive": true,
          "checkerList": [
            {
              "code": "ConfusionBetweenInheritedAndOuterMethod",
              "name": "edu.umd.cs.findbugs.detect.ConfusionBetweenInheritedAndOuterMethod",
              "severity": {
                "name": "info",
                "level": "INFO",
                "code": "ETC"
              },
              "version": {
                "major": 2,
                "minor": 0,
                "patch": 3
              },
              "description": "Potentially ambiguous invocation of either an inherited or outer method\r\n",
              "isActive": false,
              "properties": [
                
              ],
              "cwe": 0
            }
          ],
          "filters": [
            
          ]
        },
        {
          "code": "B",
          "name": "BAD_PRACTICE",
          "isActive": true,
          "checkerList": [
            {
              "code": "BooleanReturnNull",
              "name": "edu.umd.cs.findbugs.detect.BooleanReturnNull",
              "severity": {
                "name": "critical",
                "level": "ERROR",
                "code": "CRI"
              },
              "version": {
                "major": 2,
                "minor": 0,
                "patch": 3
              },
              "description": "Method with Boolean return type returns explicit null\r\n",
              "isActive": true,
              "properties": [
                
              ],
              "cwe": 0
            }
          ],
          "filters": [
            
          ]
        },
        {
          "code": "P",
          "name": "PERFORMANCE",
          "isActive": true,
          "checkerList": [
            {
              "code": "HugeSharedStringConstants",
              "name": "edu.umd.cs.findbugs.detect.HugeSharedStringConstants",
              "severity": {
                "name": "info",
                "level": "INFO",
                "code": "ETC"
              },
              "version": {
                "major": 2,
                "minor": 0,
                "patch": 3
              },
              "description": "Huge string constants is duplicated across multiple class files\r\n",
              "isActive": false,
              "properties": [
                
              ],
              "cwe": 0
            }
          ],
          "filters": [
            
          ]
        },
        {
          "code": "NS",
          "name": "NS",
          "description": "Potentially dangerous use of non-short-circuit logic",
          "isActive": true,
          "checkerList": [
            {
              "code": "FindNonShortCircuit",
              "name": "edu.umd.cs.findbugs.detect.FindNonShortCircuit",
              "severity": {
                "name": "info",
                "level": "INFO",
                "code": "ETC"
              },
              "version": {
                "major": 2,
                "minor": 0,
                "patch": 3
              },
              "description": "Potentially dangerous use of non-short-circuit logic\r\nQuestionable use of non-short-circuit logic\r\n",
              "isActive": true,
              "properties": [
                
              ],
              "cwe": 0
            }
          ],
          "filters": [
            
          ]
        },
        {
          "code": "M",
          "name": "MT_CORRECTNESS",
          "isActive": true,
          "checkerList": [
            {
              "code": "SynchronizeAndNullCheckField",
              "name": "edu.umd.cs.findbugs.detect.SynchronizeAndNullCheckField",
              "severity": {
                "name": "critical",
                "level": "ERROR",
                "code": "CRI"
              },
              "version": {
                "major": 2,
                "minor": 0,
                "patch": 3
              },
              "description": "Synchronize and null check on the same field.\r\n",
              "isActive": true,
              "properties": [
                
              ],
              "cwe": 585
            }
          ],
          "filters": [
            
          ]
        },
        {
          "code": "N",
          "name": "NOISE",
          "isActive": true,
          "checkerList": [
            {
              "code": "NoiseNullDeref",
              "name": "edu.umd.cs.findbugs.detect.NoiseNullDeref",
              "severity": {
                "name": "info",
                "level": "INFO",
                "code": "ETC"
              },
              "version": {
                "major": 2,
                "minor": 0,
                "patch": 3
              },
              "description": "Bogus warning about a null pointer dereference\r\n",
              "isActive": false,
              "properties": [
                
              ],
              "cwe": 0
            }
          ],
          "filters": [
            
          ]
        },
        {
          "code": "NP",
          "name": "NP",
          "description": "Synchronize and null check on the same field.",
          "isActive": true,
          "checkerList": [
            {
              "code": "CheckRelaxingNullnessAnnotation",
              "name": "edu.umd.cs.findbugs.detect.CheckRelaxingNullnessAnnotation",
              "severity": {
                "name": "critical",
                "level": "ERROR",
                "code": "CRI"
              },
              "version": {
                "major": 2,
                "minor": 0,
                "patch": 3
              },
              "description": "Method tightens nullness annotation on parameter\r\nMethod relaxes nullness annotation on return value\r\n",
              "isActive": true,
              "properties": [
                
              ],
              "cwe": 0
            },
            {
              "code": "DumbMethods",
              "name": "edu.umd.cs.findbugs.detect.DumbMethods",
              "severity": {
                "name": "info",
                "level": "INFO",
                "code": "ETC"
              },
              "version": {
                "major": 2,
                "minor": 0,
                "patch": 3
              },
              "description": "Equals method should not assume anything about the type of its argument\r\nBitwise add of signed byte value\r\nBitwise OR of signed byte value\r\nCan\u0027t use reflection to check for presence of annotation without runtime retention\r\nReversed method arguments\r\nBigDecimal constructed from double that isn\u0027t represented precisely\r\nhasNext method invokes next\r\nMaps and sets of URLs can be performance hogs\r\nD\u0027oh! A nonsensical method invocation\r\nFutile attempt to change max pool size of ScheduledThreadPoolExecutor\r\nDouble.longBitsToDouble invoked on an int\r\nRandom object created and used only once\r\nCreation of ScheduledThreadPoolExecutor with zero core threads\r\nThread passed where Runnable expected\r\nUseless/vacuous call to EasyMock method\r\nMethod invokes inefficient Boolean constructor; use Boolean.valueOf(...) instead\r\nBoxing/unboxing to parse a primitive\r\nMethod allocates a boxed primitive just to call toString\r\nConsider using Locale parameterized version of invoked method\r\nMethod invokes System.exit(...)\r\nExplicit garbage collection; extremely dubious except in benchmarking code\r\nMonitor wait() called on Condition\r\nMethod allocates an object, only to get the class object\r\nUse the nextInt method of Random rather than nextDouble to generate a random integer\r\nMethod invokes dangerous method runFinalizersOnExit\r\nMethod invokes inefficient new String(String) constructor\r\nMethod invokes toString() method on a String\r\nMethod invokes inefficient new String() constructor\r\nA thread was created using the default empty run method\r\nBad comparison of int value with long constant\r\nBad comparison of nonnegative value with negative constant\r\nBad comparison of signed byte\r\nInteger remainder modulo 1\r\nVacuous bit mask operation on integer value\r\nVacuous comparison of integer value\r\nImmediate dereference of the result of readLine()\r\nRandom value from 0 to 1 is coerced to the integer 0\r\nBad attempt to compute absolute value of signed 32-bit hashcode \r\nBad attempt to compute absolute value of signed random integer\r\nRemainder of hashCode could be negative\r\nRemainder of 32-bit signed random integer\r\nCertain swing methods needs to be invoked in Swing thread\r\n",
              "isActive": false,
              "properties": [
                
              ],
              "cwe": 0
            },
            {
              "code": "SynchronizeAndNullCheckField",
              "name": "edu.umd.cs.findbugs.detect.SynchronizeAndNullCheckField",
              "severity": {
                "name": "critical",
                "level": "ERROR",
                "code": "CRI"
              },
              "version": {
                "major": 2,
                "minor": 0,
                "patch": 3
              },
              "description": "Synchronize and null check on the same field.\r\n",
              "isActive": true,
              "properties": [
                
              ],
              "cwe": 585
            },
            {
              "code": "UnreadFields",
              "name": "edu.umd.cs.findbugs.detect.UnreadFields",
              "severity": {
                "name": "major",
                "level": "WARN",
                "code": "MAJ"
              },
              "version": {
                "major": 2,
                "minor": 0,
                "patch": 3
              },
              "description": "Read of unwritten field\r\nRead of unwritten public or protected field\r\nShould be a static inner class\r\nCould be refactored into a named static inner class\r\nCould be refactored into a static inner class\r\nDeadly embrace of non-static inner class and thread local\r\nUnread field: should this field be static?\r\nWrite to static field from instance method\r\nUnread field\r\nUnread public/protected field\r\nUnused field\r\nUnused public or protected field\r\nField not initialized in constructor but dereferenced without null check\r\nField only ever set to null\r\nUnwritten field\r\nUnwritten public or protected field\r\n",
              "isActive": true,
              "properties": [
                
              ],
              "cwe": 0
            },
            {
              "code": "NoteUnconditionalParamDerefs",
              "name": "edu.umd.cs.findbugs.detect.NoteUnconditionalParamDerefs",
              "severity": {
                "name": "critical",
                "level": "ERROR",
                "code": "CRI"
              },
              "version": {
                "major": 2,
                "minor": 0,
                "patch": 3
              },
              "description": "equals() method does not check for null argument\r\nParameter must be nonnull but is marked as nullable\r\n",
              "isActive": true,
              "properties": [
                
              ],
              "cwe": 0
            },
            {
              "code": "InitializeNonnullFieldsInConstructor",
              "name": "edu.umd.cs.findbugs.detect.InitializeNonnullFieldsInConstructor",
              "severity": {
                "name": "critical",
                "level": "ERROR",
                "code": "CRI"
              },
              "version": {
                "major": 2,
                "minor": 0,
                "patch": 3
              },
              "description": "Nonnull field is not initialized\r\n",
              "isActive": true,
              "properties": [
                
              ],
              "cwe": 0
            },
            {
              "code": "FindNullDerefsInvolvingNonShortCircuitEvaluation",
              "name": "edu.umd.cs.findbugs.detect.FindNullDerefsInvolvingNonShortCircuitEvaluation",
              "severity": {
                "name": "critical",
                "level": "ERROR",
                "code": "CRI"
              },
              "version": {
                "major": 2,
                "minor": 0,
                "patch": 3
              },
              "description": "Null value is guaranteed to be dereferenced\r\nPossible null pointer dereference\r\n",
              "isActive": true,
              "properties": [
                
              ],
              "cwe": 0
            },
            {
              "code": "FindBadCast2",
              "name": "edu.umd.cs.findbugs.detect.FindBadCast2",
              "severity": {
                "name": "info",
                "level": "INFO",
                "code": "ETC"
              },
              "version": {
                "major": 2,
                "minor": 0,
                "patch": 3
              },
              "description": "Questionable cast to abstract collection \r\nQuestionable cast to concrete collection\r\nImpossible cast\r\nImpossible downcast\r\nImpossible downcast of toArray() result\r\ninstanceof will always return false\r\nUnchecked/unconfirmed cast\r\nUnchecked/unconfirmed cast of return value from method\r\ninstanceof will always return true\r\nA known null value is checked to see if it is an instance of a type\r\n",
              "isActive": false,
              "properties": [
                
              ],
              "cwe": 0
            },
            {
              "code": "LoadOfKnownNullValue",
              "name": "edu.umd.cs.findbugs.detect.LoadOfKnownNullValue",
              "severity": {
                "name": "critical",
                "level": "ERROR",
                "code": "CRI"
              },
              "version": {
                "major": 2,
                "minor": 0,
                "patch": 3
              },
              "description": "Load of known null value\r\n",
              "isActive": true,
              "properties": [
                
              ],
              "cwe": 0
            },
            {
              "code": "InconsistentAnnotations",
              "name": "edu.umd.cs.findbugs.detect.InconsistentAnnotations",
              "severity": {
                "name": "critical",
                "level": "ERROR",
                "code": "CRI"
              },
              "version": {
                "major": 2,
                "minor": 0,
                "patch": 3
              },
              "description": "Parameter must be nonnull but is marked as nullable\r\n",
              "isActive": true,
              "properties": [
                
              ],
              "cwe": 0
            },
            {
              "code": "BooleanReturnNull",
              "name": "edu.umd.cs.findbugs.detect.BooleanReturnNull",
              "severity": {
                "name": "critical",
                "level": "ERROR",
                "code": "CRI"
              },
              "version": {
                "major": 2,
                "minor": 0,
                "patch": 3
              },
              "description": "Method with Boolean return type returns explicit null\r\n",
              "isActive": true,
              "properties": [
                
              ],
              "cwe": 0
            },
            {
              "code": "FindNullDeref",
              "name": "edu.umd.cs.findbugs.detect.FindNullDeref",
              "severity": {
                "name": "critical",
                "level": "ERROR",
                "code": "CRI"
              },
              "version": {
                "major": 2,
                "minor": 0,
                "patch": 3
              },
              "description": "Null pointer dereference\r\nNull pointer dereference in method on exception path\r\nMethod does not check for null argument\r\nClone method may return null\r\nclose() invoked on a value that is always null\r\nDereference of the result of readLine() without nullcheck\r\nequals() method does not check for null argument\r\nNull value is guaranteed to be dereferenced\r\nValue is null and guaranteed to be dereferenced on exception path\r\nMethod call passes null to a nonnull parameter \r\nMethod may return null, but is declared @NonNull\r\nPossible null pointer dereference\r\nPossible null pointer dereference in method on exception path\r\nPossible null pointer dereference due to return value of called method\r\nPossible null pointer dereference on branch that might be infeasible\r\nMethod call passes null for nonnull parameter\r\nMethod call passes null for nonnull parameter\r\nNon-virtual method call passes null for nonnull parameter\r\nStore of null value into field annotated NonNull\r\ntoString method may return null\r\nRedundant comparison of non-null value to null\r\nRedundant comparison of two null values\r\nRedundant nullcheck of value known to be non-null\r\nRedundant nullcheck of value known to be null\r\nNullcheck of value previously dereferenced\r\n",
              "isActive": true,
              "properties": [
                
              ],
              "cwe": 0
            }
          ],
          "filters": [
            
          ]
        },
        {
          "code": "I",
          "name": "I18N",
          "isActive": true,
          "checkerList": [
            {
              "code": "DumbMethods",
              "name": "edu.umd.cs.findbugs.detect.DumbMethods",
              "severity": {
                "name": "info",
                "level": "INFO",
                "code": "ETC"
              },
              "version": {
                "major": 2,
                "minor": 0,
                "patch": 3
              },
              "description": "Equals method should not assume anything about the type of its argument\r\nBitwise add of signed byte value\r\nBitwise OR of signed byte value\r\nCan\u0027t use reflection to check for presence of annotation without runtime retention\r\nReversed method arguments\r\nBigDecimal constructed from double that isn\u0027t represented precisely\r\nhasNext method invokes next\r\nMaps and sets of URLs can be performance hogs\r\nD\u0027oh! A nonsensical method invocation\r\nFutile attempt to change max pool size of ScheduledThreadPoolExecutor\r\nDouble.longBitsToDouble invoked on an int\r\nRandom object created and used only once\r\nCreation of ScheduledThreadPoolExecutor with zero core threads\r\nThread passed where Runnable expected\r\nUseless/vacuous call to EasyMock method\r\nMethod invokes inefficient Boolean constructor; use Boolean.valueOf(...) instead\r\nBoxing/unboxing to parse a primitive\r\nMethod allocates a boxed primitive just to call toString\r\nConsider using Locale parameterized version of invoked method\r\nMethod invokes System.exit(...)\r\nExplicit garbage collection; extremely dubious except in benchmarking code\r\nMonitor wait() called on Condition\r\nMethod allocates an object, only to get the class object\r\nUse the nextInt method of Random rather than nextDouble to generate a random integer\r\nMethod invokes dangerous method runFinalizersOnExit\r\nMethod invokes inefficient new String(String) constructor\r\nMethod invokes toString() method on a String\r\nMethod invokes inefficient new String() constructor\r\nA thread was created using the default empty run method\r\nBad comparison of int value with long constant\r\nBad comparison of nonnegative value with negative constant\r\nBad comparison of signed byte\r\nInteger remainder modulo 1\r\nVacuous bit mask operation on integer value\r\nVacuous comparison of integer value\r\nImmediate dereference of the result of readLine()\r\nRandom value from 0 to 1 is coerced to the integer 0\r\nBad attempt to compute absolute value of signed 32-bit hashcode \r\nBad attempt to compute absolute value of signed random integer\r\nRemainder of hashCode could be negative\r\nRemainder of 32-bit signed random integer\r\nCertain swing methods needs to be invoked in Swing thread\r\n",
              "isActive": false,
              "properties": [
                
              ],
              "cwe": 0
            }
          ],
          "filters": [
            
          ]
        },
        {
          "code": "DMI",
          "name": "DMI",
          "description": "Code contains a hard coded reference to an absolute pathname",
          "isActive": true,
          "checkerList": [
            {
              "code": "DumbMethods",
              "name": "edu.umd.cs.findbugs.detect.DumbMethods",
              "severity": {
                "name": "info",
                "level": "INFO",
                "code": "ETC"
              },
              "version": {
                "major": 2,
                "minor": 0,
                "patch": 3
              },
              "description": "Equals method should not assume anything about the type of its argument\r\nBitwise add of signed byte value\r\nBitwise OR of signed byte value\r\nCan\u0027t use reflection to check for presence of annotation without runtime retention\r\nReversed method arguments\r\nBigDecimal constructed from double that isn\u0027t represented precisely\r\nhasNext method invokes next\r\nMaps and sets of URLs can be performance hogs\r\nD\u0027oh! A nonsensical method invocation\r\nFutile attempt to change max pool size of ScheduledThreadPoolExecutor\r\nDouble.longBitsToDouble invoked on an int\r\nRandom object created and used only once\r\nCreation of ScheduledThreadPoolExecutor with zero core threads\r\nThread passed where Runnable expected\r\nUseless/vacuous call to EasyMock method\r\nMethod invokes inefficient Boolean constructor; use Boolean.valueOf(...) instead\r\nBoxing/unboxing to parse a primitive\r\nMethod allocates a boxed primitive just to call toString\r\nConsider using Locale parameterized version of invoked method\r\nMethod invokes System.exit(...)\r\nExplicit garbage collection; extremely dubious except in benchmarking code\r\nMonitor wait() called on Condition\r\nMethod allocates an object, only to get the class object\r\nUse the nextInt method of Random rather than nextDouble to generate a random integer\r\nMethod invokes dangerous method runFinalizersOnExit\r\nMethod invokes inefficient new String(String) constructor\r\nMethod invokes toString() method on a String\r\nMethod invokes inefficient new String() constructor\r\nA thread was created using the default empty run method\r\nBad comparison of int value with long constant\r\nBad comparison of nonnegative value with negative constant\r\nBad comparison of signed byte\r\nInteger remainder modulo 1\r\nVacuous bit mask operation on integer value\r\nVacuous comparison of integer value\r\nImmediate dereference of the result of readLine()\r\nRandom value from 0 to 1 is coerced to the integer 0\r\nBad attempt to compute absolute value of signed 32-bit hashcode \r\nBad attempt to compute absolute value of signed random integer\r\nRemainder of hashCode could be negative\r\nRemainder of 32-bit signed random integer\r\nCertain swing methods needs to be invoked in Swing thread\r\n",
              "isActive": false,
              "properties": [
                
              ],
              "cwe": 0
            },
            {
              "code": "DumbMethodInvocations",
              "name": "edu.umd.cs.findbugs.detect.DumbMethodInvocations",
              "severity": {
                "name": "info",
                "level": "INFO",
                "code": "ETC"
              },
              "version": {
                "major": 2,
                "minor": 0,
                "patch": 3
              },
              "description": "Hardcoded constant database password\r\nEmpty database password\r\nCode contains a hard coded reference to an absolute pathname\r\nInvocation of substring(0), which returns the original value\r\n",
              "isActive": false,
              "properties": [
                
              ],
              "cwe": 0
            },
            {
              "code": "FindUnrelatedTypesInGenericContainer",
              "name": "edu.umd.cs.findbugs.detect.FindUnrelatedTypesInGenericContainer",
              "severity": {
                "name": "info",
                "level": "INFO",
                "code": "ETC"
              },
              "version": {
                "major": 2,
                "minor": 0,
                "patch": 3
              },
              "description": "Collections should not contain themselves\r\nDon\u0027t use removeAll to clear a collection\r\nVacuous call to collections\r\nUnchecked type in generic call\r\nNo relationship between generic parameter and method argument\r\n",
              "isActive": false,
              "properties": [
                
              ],
              "cwe": 0
            },
            {
              "code": "FindRefComparison",
              "name": "edu.umd.cs.findbugs.detect.FindRefComparison",
              "severity": {
                "name": "critical",
                "level": "ERROR",
                "code": "CRI"
              },
              "version": {
                "major": 2,
                "minor": 0,
                "patch": 3
              },
              "description": "D\u0027oh! A nonsensical method invocation\r\nequals() used to compare array and nonarray\r\nInvocation of equals() on an array, which is equivalent to \u003d\u003d\r\nequals(...) used to compare incompatible arrays\r\nCall to equals(null)\r\nCall to equals() comparing unrelated class and interface\r\nCall to equals() comparing different interface types\r\nCall to equals() comparing different types\r\nUsing pointer equality to compare different types\r\nComparison of String parameter using \u003d\u003d or !\u003d\r\nComparison of String objects using \u003d\u003d or !\u003d\r\nSuspicious reference comparison\r\nSuspicious reference comparison to constant\r\nSuspicious reference comparison of Boolean values\r\n",
              "isActive": true,
              "properties": [
                
              ],
              "cwe": 0
            },
            {
              "code": "FindPuzzlers",
              "name": "edu.umd.cs.findbugs.detect.FindPuzzlers",
              "severity": {
                "name": "critical",
                "level": "ERROR",
                "code": "CRI"
              },
              "version": {
                "major": 2,
                "minor": 0,
                "patch": 3
              },
              "description": "Primitive value is boxed and then immediately unboxed\r\nPrimitive value is boxed then unboxed to perform primitive coercion\r\nPrimitive value is unboxed and coerced for ternary operator\r\nBoxed value is unboxed and then immediately reboxed\r\ncompareTo()/compare() returns Integer.MIN_VALUE\r\nUseless assignment in return statement\r\nOverwritten increment\r\nBad constant value for month\r\nAdding elements of an entry set may fail due to reuse of Entry objects\r\nInvocation of hashCode on an array\r\nInvocation of toString on an unnamed array\r\nInvocation of toString on an array\r\nInvocation of equals() on an array, which is equivalent to \u003d\u003d\r\n32 bit int shifted by an amount not in the range -31..31\r\nResult of integer multiplication cast to long\r\nUnsigned right shift cast to short/byte\r\nSuperclass uses subclass during initialization\r\nJUnit assertion in run method will not be noticed by JUnit\r\nComputation of average could overflow\r\nCheck for oddness that won\u0027t work for negative numbers \r\nInteger multiply of result of integer remainder\r\nDon\u0027t reuse entry objects in iterators\r\nNegating the result of compareTo()/compare()\r\n",
              "isActive": true,
              "properties": [
                
              ],
              "cwe": 0
            },
            {
              "code": "FindNonSerializableValuePassedToWriteObject",
              "name": "edu.umd.cs.findbugs.detect.FindNonSerializableValuePassedToWriteObject",
              "severity": {
                "name": "info",
                "level": "INFO",
                "code": "ETC"
              },
              "version": {
                "major": 2,
                "minor": 0,
                "patch": 3
              },
              "description": "Non serializable object written to ObjectOutput\r\n",
              "isActive": false,
              "properties": [
                
              ],
              "cwe": 0
            },
            {
              "code": "FindUseOfNonSerializableValue",
              "name": "edu.umd.cs.findbugs.detect.FindUseOfNonSerializableValue",
              "severity": {
                "name": "info",
                "level": "INFO",
                "code": "ETC"
              },
              "version": {
                "major": 2,
                "minor": 0,
                "patch": 3
              },
              "description": "Non serializable object written to ObjectOutput\r\nStore of non serializable object into HttpSession\r\n",
              "isActive": false,
              "properties": [
                
              ],
              "cwe": 579
            }
          ],
          "filters": [
            
          ]
        },
        {
          "code": "X",
          "name": "EXPERIMENTAL",
          "isActive": true,
          "checkerList": [
            {
              "code": "LostLoggerDueToWeakReference",
              "name": "edu.umd.cs.findbugs.detect.LostLoggerDueToWeakReference",
              "severity": {
                "name": "info",
                "level": "INFO",
                "code": "ETC"
              },
              "version": {
                "major": 2,
                "minor": 0,
                "patch": 3
              },
              "description": "Potential lost logger changes due to weak reference in OpenJDK\r\n",
              "isActive": false,
              "properties": [
                
              ],
              "cwe": 0
            }
          ],
          "filters": [
            
          ]
        },
        {
          "code": "V",
          "name": "MALICIOUS_CODE",
          "isActive": true,
          "checkerList": [
            {
              "code": "DoInsideDoPrivileged",
              "name": "edu.umd.cs.findbugs.detect.DoInsideDoPrivileged",
              "severity": {
                "name": "major",
                "level": "WARN",
                "code": "MAJ"
              },
              "version": {
                "major": 2,
                "minor": 0,
                "patch": 3
              },
              "description": "Classloaders should only be created inside doPrivileged block\r\nMethod invoked that should be only be invoked inside a doPrivileged block\r\n",
              "isActive": true,
              "properties": [
                
              ],
              "cwe": 0
            }
          ],
          "filters": [
            
          ]
        },
        {
          "code": "Nm",
          "name": "Nm",
          "description": "Use of identifier that is a keyword in later versions of Java",
          "isActive": true,
          "checkerList": [
            {
              "code": "Naming",
              "name": "edu.umd.cs.findbugs.detect.Naming",
              "severity": {
                "name": "crc",
                "level": "WARN",
                "code": "CRC"
              },
              "version": {
                "major": 2,
                "minor": 0,
                "patch": 3
              },
              "description": "Class defines equal(Object); should it be equals(Object)?\r\nClass names should start with an upper case letter\r\nClass is not derived from an Exception, even though it is named as such\r\nConfusing method names\r\nField names should start with a lower case letter\r\nClass defines hashcode(); should it be hashCode()?\r\nClass defines tostring(); should it be toString()?\r\nApparent method/constructor confusion\r\nMethod names should start with a lower case letter\r\nClass names shouldn\u0027t shadow simple name of implemented interface\r\nClass names shouldn\u0027t shadow simple name of superclass\r\nVery confusing method names\r\nVery confusing method names (but perhaps intentional)\r\nMethod doesn\u0027t override method in superclass due to wrong package for parameter\r\nMethod doesn\u0027t override method in superclass due to wrong package for parameter\r\n",
              "isActive": true,
              "properties": [
                
              ],
              "cwe": 0
            },
            {
              "code": "DontUseEnum",
              "name": "edu.umd.cs.findbugs.detect.DontUseEnum",
              "severity": {
                "name": "crc",
                "level": "WARN",
                "code": "CRC"
              },
              "version": {
                "major": 2,
                "minor": 0,
                "patch": 3
              },
              "description": "Use of identifier that is a keyword in later versions of Java\r\nUse of identifier that is a keyword in later versions of Java\r\n",
              "isActive": true,
              "properties": [
                
              ],
              "cwe": 0
            }
          ],
          "filters": [
            
          ]
        },
        {
          "code": "VA",
          "name": "VA",
          "description": "Primitive array passed to function expecting a variable number of object arguments",
          "isActive": true,
          "checkerList": [
            {
              "code": "VarArgsProblems",
              "name": "edu.umd.cs.findbugs.detect.VarArgsProblems",
              "severity": {
                "name": "info",
                "level": "INFO",
                "code": "ETC"
              },
              "version": {
                "major": 2,
                "minor": 0,
                "patch": 3
              },
              "description": "Primitive array passed to function expecting a variable number of object arguments\r\n",
              "isActive": false,
              "properties": [
                
              ],
              "cwe": 0
            }
          ],
          "filters": [
            
          ]
        },
        {
          "code": "FS",
          "name": "FS",
          "description": "Format string placeholder incompatible with passed argument",
          "isActive": true,
          "checkerList": [
            {
              "code": "FormatStringChecker",
              "name": "edu.umd.cs.findbugs.detect.FormatStringChecker",
              "severity": {
                "name": "critical",
                "level": "ERROR",
                "code": "CRI"
              },
              "version": {
                "major": 2,
                "minor": 0,
                "patch": 3
              },
              "description": "Format string placeholder incompatible with passed argument\r\nThe type of a supplied argument doesn\u0027t match format specifier\r\nArray formatted in useless way using format string\r\nNon-Boolean argument formatted using %b format specifier\r\nMessageFormat supplied where printf style format expected\r\nMore arguments are passed than are actually used in the format string\r\nIllegal format string\r\nFormat string references missing argument\r\nNo previous argument for format string\r\nFormat string should use %n rather than \\n\r\n",
              "isActive": true,
              "properties": [
                
              ],
              "cwe": 0
            }
          ],
          "filters": [
            
          ]
        },
        {
          "code": "Eq",
          "name": "Eq",
          "description": "Equals checks for incompatible operand",
          "isActive": true,
          "checkerList": [
            {
              "code": "EqualsOperandShouldHaveClassCompatibleWithThis",
              "name": "edu.umd.cs.findbugs.detect.EqualsOperandShouldHaveClassCompatibleWithThis",
              "severity": {
                "name": "major",
                "level": "WARN",
                "code": "MAJ"
              },
              "version": {
                "major": 2,
                "minor": 0,
                "patch": 3
              },
              "description": "Equals checks for incompatible operand\r\n",
              "isActive": true,
              "properties": [
                
              ],
              "cwe": 0
            },
            {
              "code": "OverridingEqualsNotSymmetrical",
              "name": "edu.umd.cs.findbugs.detect.OverridingEqualsNotSymmetrical",
              "severity": {
                "name": "major",
                "level": "WARN",
                "code": "MAJ"
              },
              "version": {
                "major": 2,
                "minor": 0,
                "patch": 3
              },
              "description": "equals method always returns false\r\nequals method always returns true\r\nequals method compares class names rather than class objects\r\nequals method fails for subtypes\r\nequals method overrides equals in superclass and may not be symmetric\r\nUnusual equals method \r\n",
              "isActive": true,
              "properties": [
                
              ],
              "cwe": 0
            },
            {
              "code": "FindHEmismatch",
              "name": "edu.umd.cs.findbugs.detect.FindHEmismatch",
              "severity": {
                "name": "critical",
                "level": "ERROR",
                "code": "CRI"
              },
              "version": {
                "major": 2,
                "minor": 0,
                "patch": 3
              },
              "description": "Abstract class defines covariant compareTo() method\r\nCovariant compareTo() method defined\r\nAbstract class defines covariant equals() method\r\nClass defines compareTo(...) and uses Object.equals()\r\nClass doesn\u0027t override equals in superclass\r\nCovariant equals() method defined for enum\r\nequals() method defined that doesn\u0027t override equals(Object)\r\nequals() method defined that doesn\u0027t override Object.equals(Object)\r\nCovariant equals() method defined\r\nCovariant equals() method defined, Object.equals(Object) inherited\r\nClass defines equals() but not hashCode()\r\nClass defines equals() and uses Object.hashCode()\r\nClass defines hashCode() but not equals()\r\nClass defines hashCode() and uses Object.equals()\r\nClass inherits equals() and uses Object.hashCode()\r\nSignature declares use of unhashable class in hashed construct\r\nUse of class without a hashCode() method in a hashed data structure\r\n",
              "isActive": true,
              "properties": [
                
              ],
              "cwe": 0
            }
          ],
          "filters": [
            
          ]
        },
        {
          "code": "UCF",
          "name": "UCF",
          "description": "Useless control flow",
          "isActive": true,
          "checkerList": [
            {
              "code": "FindUselessControlFlow",
              "name": "edu.umd.cs.findbugs.detect.FindUselessControlFlow",
              "severity": {
                "name": "info",
                "level": "INFO",
                "code": "ETC"
              },
              "version": {
                "major": 2,
                "minor": 0,
                "patch": 3
              },
              "description": "Useless control flow\r\nUseless control flow to next line\r\n",
              "isActive": true,
              "properties": [
                
              ],
              "cwe": 0
            }
          ],
          "filters": [
            
          ]
        },
        {
          "code": "ITA",
          "name": "ITA",
          "description": "Method uses toArray() with zero-length array argument",
          "isActive": true,
          "checkerList": [
            {
              "code": "InefficientToArray",
              "name": "edu.umd.cs.findbugs.detect.InefficientToArray",
              "severity": {
                "name": "info",
                "level": "INFO",
                "code": "ETC"
              },
              "version": {
                "major": 2,
                "minor": 0,
                "patch": 3
              },
              "description": "Method uses toArray() with zero-length array argument\r\n",
              "isActive": true,
              "properties": [
                
              ],
              "cwe": 0
            }
          ],
          "filters": [
            
          ]
        },
        {
          "code": "S",
          "name": "SECURITY",
          "isActive": true,
          "checkerList": [
            {
              "code": "DumbMethodInvocations",
              "name": "edu.umd.cs.findbugs.detect.DumbMethodInvocations",
              "severity": {
                "name": "info",
                "level": "INFO",
                "code": "ETC"
              },
              "version": {
                "major": 2,
                "minor": 0,
                "patch": 3
              },
              "description": "Hardcoded constant database password\r\nEmpty database password\r\nCode contains a hard coded reference to an absolute pathname\r\nInvocation of substring(0), which returns the original value\r\n",
              "isActive": false,
              "properties": [
                
              ],
              "cwe": 0
            }
          ],
          "filters": [
            
          ]
        },
        {
          "code": "INT",
          "name": "INT",
          "description": "Bad comparison of int value with long constant",
          "isActive": true,
          "checkerList": [
            {
              "code": "DumbMethods",
              "name": "edu.umd.cs.findbugs.detect.DumbMethods",
              "severity": {
                "name": "info",
                "level": "INFO",
                "code": "ETC"
              },
              "version": {
                "major": 2,
                "minor": 0,
                "patch": 3
              },
              "description": "Equals method should not assume anything about the type of its argument\r\nBitwise add of signed byte value\r\nBitwise OR of signed byte value\r\nCan\u0027t use reflection to check for presence of annotation without runtime retention\r\nReversed method arguments\r\nBigDecimal constructed from double that isn\u0027t represented precisely\r\nhasNext method invokes next\r\nMaps and sets of URLs can be performance hogs\r\nD\u0027oh! A nonsensical method invocation\r\nFutile attempt to change max pool size of ScheduledThreadPoolExecutor\r\nDouble.longBitsToDouble invoked on an int\r\nRandom object created and used only once\r\nCreation of ScheduledThreadPoolExecutor with zero core threads\r\nThread passed where Runnable expected\r\nUseless/vacuous call to EasyMock method\r\nMethod invokes inefficient Boolean constructor; use Boolean.valueOf(...) instead\r\nBoxing/unboxing to parse a primitive\r\nMethod allocates a boxed primitive just to call toString\r\nConsider using Locale parameterized version of invoked method\r\nMethod invokes System.exit(...)\r\nExplicit garbage collection; extremely dubious except in benchmarking code\r\nMonitor wait() called on Condition\r\nMethod allocates an object, only to get the class object\r\nUse the nextInt method of Random rather than nextDouble to generate a random integer\r\nMethod invokes dangerous method runFinalizersOnExit\r\nMethod invokes inefficient new String(String) constructor\r\nMethod invokes toString() method on a String\r\nMethod invokes inefficient new String() constructor\r\nA thread was created using the default empty run method\r\nBad comparison of int value with long constant\r\nBad comparison of nonnegative value with negative constant\r\nBad comparison of signed byte\r\nInteger remainder modulo 1\r\nVacuous bit mask operation on integer value\r\nVacuous comparison of integer value\r\nImmediate dereference of the result of readLine()\r\nRandom value from 0 to 1 is coerced to the integer 0\r\nBad attempt to compute absolute value of signed 32-bit hashcode \r\nBad attempt to compute absolute value of signed random integer\r\nRemainder of hashCode could be negative\r\nRemainder of 32-bit signed random integer\r\nCertain swing methods needs to be invoked in Swing thread\r\n",
              "isActive": false,
              "properties": [
                
              ],
              "cwe": 0
            }
          ],
          "filters": [
            
          ]
        },
        {
          "code": "UW",
          "name": "UW",
          "description": "Unconditional wait",
          "isActive": true,
          "checkerList": [
            {
              "code": "FindUnconditionalWait",
              "name": "edu.umd.cs.findbugs.detect.FindUnconditionalWait",
              "severity": {
                "name": "info",
                "level": "INFO",
                "code": "ETC"
              },
              "version": {
                "major": 2,
                "minor": 0,
                "patch": 3
              },
              "description": "Unconditional wait\r\n",
              "isActive": false,
              "properties": [
                
              ],
              "cwe": 0
            }
          ],
          "filters": [
            
          ]
        },
        {
          "code": "FL",
          "name": "FL",
          "description": "Method performs math using floating point precision",
          "isActive": true,
          "checkerList": [
            {
              "code": "FindFloatMath",
              "name": "edu.umd.cs.findbugs.detect.FindFloatMath",
              "severity": {
                "name": "info",
                "level": "INFO",
                "code": "ETC"
              },
              "version": {
                "major": 2,
                "minor": 0,
                "patch": 3
              },
              "description": "Method performs math using floating point precision\r\n",
              "isActive": false,
              "properties": [
                
              ],
              "cwe": 0
            }
          ],
          "filters": [
            
          ]
        },
        {
          "code": "FI",
          "name": "FI",
          "description": "Finalizer nulls fields",
          "isActive": true,
          "checkerList": [
            {
              "code": "FindFinalizeInvocations",
              "name": "edu.umd.cs.findbugs.detect.FindFinalizeInvocations",
              "severity": {
                "name": "critical",
                "level": "ERROR",
                "code": "CRI"
              },
              "version": {
                "major": 2,
                "minor": 0,
                "patch": 3
              },
              "description": "Empty finalizer should be deleted\r\nExplicit invocation of finalizer\r\nFinalizer does not call superclass finalizer\r\nFinalizer nullifies superclass finalizer\r\nFinalizer should be protected, not public\r\nFinalizer does nothing but call superclass finalizer\r\n",
              "isActive": true,
              "properties": [
                
              ],
              "cwe": 0
            },
            {
              "code": "FinalizerNullsFields",
              "name": "edu.umd.cs.findbugs.detect.FinalizerNullsFields",
              "severity": {
                "name": "critical",
                "level": "ERROR",
                "code": "CRI"
              },
              "version": {
                "major": 2,
                "minor": 0,
                "patch": 3
              },
              "description": "Finalizer nulls fields\r\nFinalizer only nulls fields\r\n",
              "isActive": true,
              "properties": [
                
              ],
              "cwe": 0
            }
          ],
          "filters": [
            
          ]
        },
        {
          "code": "QF",
          "name": "QF",
          "description": "Complicated, subtle or wrong increment in for-loop ",
          "isActive": true,
          "checkerList": [
            {
              "code": "FindBadForLoop",
              "name": "edu.umd.cs.findbugs.detect.FindBadForLoop",
              "severity": {
                "name": "info",
                "level": "INFO",
                "code": "ETC"
              },
              "version": {
                "major": 2,
                "minor": 0,
                "patch": 3
              },
              "description": "Complicated, subtle or wrong increment in for-loop \r\n",
              "isActive": false,
              "properties": [
                
              ],
              "cwe": 0
            }
          ],
          "filters": [
            
          ]
        },
        {
          "code": "OBL",
          "name": "OBL",
          "description": "Method may fail to clean up stream or resource",
          "isActive": true,
          "checkerList": [
            {
              "code": "FindUnsatisfiedObligation",
              "name": "edu.umd.cs.findbugs.detect.FindUnsatisfiedObligation",
              "severity": {
                "name": "info",
                "level": "INFO",
                "code": "ETC"
              },
              "version": {
                "major": 2,
                "minor": 0,
                "patch": 3
              },
              "description": "Method may fail to clean up stream or resource\r\nMethod may fail to clean up stream or resource on checked exception\r\n",
              "isActive": false,
              "properties": [
                
              ],
              "cwe": 0
            }
          ],
          "filters": [
            
          ]
        },
        {
          "code": "PZLA",
          "name": "PZLA",
          "description": "Consider returning a zero length array rather than null",
          "isActive": true,
          "checkerList": [
            {
              "code": "PreferZeroLengthArrays",
              "name": "edu.umd.cs.findbugs.detect.PreferZeroLengthArrays",
              "severity": {
                "name": "info",
                "level": "INFO",
                "code": "ETC"
              },
              "version": {
                "major": 2,
                "minor": 0,
                "patch": 3
              },
              "description": "Consider returning a zero length array rather than null\r\n",
              "isActive": true,
              "properties": [
                
              ],
              "cwe": 0
            }
          ],
          "filters": [
            
          ]
        },
        {
          "code": "IMSE",
          "name": "IMSE",
          "description": "Dubious catching of IllegalMonitorStateException",
          "isActive": true,
          "checkerList": [
            {
              "code": "DontCatchIllegalMonitorStateException",
              "name": "edu.umd.cs.findbugs.detect.DontCatchIllegalMonitorStateException",
              "severity": {
                "name": "info",
                "level": "INFO",
                "code": "ETC"
              },
              "version": {
                "major": 2,
                "minor": 0,
                "patch": 3
              },
              "description": "Dubious catching of IllegalMonitorStateException\r\n",
              "isActive": false,
              "properties": [
                
              ],
              "cwe": 0
            }
          ],
          "filters": [
            
          ]
        },
        {
          "code": "MWN",
          "name": "MWN",
          "description": "Mismatched notify()",
          "isActive": true,
          "checkerList": [
            {
              "code": "FindMismatchedWaitOrNotify",
              "name": "edu.umd.cs.findbugs.detect.FindMismatchedWaitOrNotify",
              "severity": {
                "name": "major",
                "level": "WARN",
                "code": "MAJ"
              },
              "version": {
                "major": 2,
                "minor": 0,
                "patch": 3
              },
              "description": "Mismatched notify()\r\nMismatched wait()\r\n",
              "isActive": true,
              "properties": [
                
              ],
              "cwe": 0
            }
          ],
          "filters": [
            
          ]
        },
        {
          "code": "QBA",
          "name": "QBA",
          "description": "Method assigns boolean literal in boolean expression",
          "isActive": true,
          "checkerList": [
            {
              "code": "QuestionableBooleanAssignment",
              "name": "edu.umd.cs.findbugs.detect.QuestionableBooleanAssignment",
              "severity": {
                "name": "major",
                "level": "WARN",
                "code": "MAJ"
              },
              "version": {
                "major": 2,
                "minor": 0,
                "patch": 3
              },
              "description": "Method assigns boolean literal in boolean expression\r\n",
              "isActive": true,
              "properties": [
                
              ],
              "cwe": 481
            }
          ],
          "filters": [
            
          ]
        },
        {
          "code": "MSF",
          "name": "MSF",
          "description": "Mutable servlet field",
          "isActive": true,
          "checkerList": [
            {
              "code": "FindInconsistentSync2",
              "name": "edu.umd.cs.findbugs.detect.FindInconsistentSync2",
              "severity": {
                "name": "major",
                "level": "WARN",
                "code": "MAJ"
              },
              "version": {
                "major": 2,
                "minor": 0,
                "patch": 3
              },
              "description": "Inconsistent synchronization\r\nField not guarded against concurrent access\r\nMutable servlet field\r\n",
              "isActive": true,
              "properties": [
                
              ],
              "cwe": 0
            }
          ],
          "filters": [
            
          ]
        },
        {
          "code": "USM",
          "name": "USM",
          "description": "Abstract Method is already defined in implemented interface",
          "isActive": true,
          "checkerList": [
            {
              "code": "UselessSubclassMethod",
              "name": "edu.umd.cs.findbugs.detect.UselessSubclassMethod",
              "severity": {
                "name": "info",
                "level": "INFO",
                "code": "ETC"
              },
              "version": {
                "major": 2,
                "minor": 0,
                "patch": 3
              },
              "description": "Abstract Method is already defined in implemented interface\r\nMethod superfluously delegates to parent class method\r\n",
              "isActive": false,
              "properties": [
                
              ],
              "cwe": 0
            }
          ],
          "filters": [
            
          ]
        },
        {
          "code": "ESync",
          "name": "ESync",
          "description": "Empty synchronized block",
          "isActive": true,
          "checkerList": [
            {
              "code": "FindEmptySynchronizedBlock",
              "name": "edu.umd.cs.findbugs.detect.FindEmptySynchronizedBlock",
              "severity": {
                "name": "major",
                "level": "WARN",
                "code": "MAJ"
              },
              "version": {
                "major": 2,
                "minor": 0,
                "patch": 3
              },
              "description": "Empty synchronized block\r\n",
              "isActive": true,
              "properties": [
                
              ],
              "cwe": 585
            }
          ],
          "filters": [
            
          ]
        },
        {
          "code": "PS",
          "name": "PS",
          "description": "Class exposes synchronization and semaphores in its public interface",
          "isActive": true,
          "checkerList": [
            {
              "code": "PublicSemaphores",
              "name": "edu.umd.cs.findbugs.detect.PublicSemaphores",
              "severity": {
                "name": "info",
                "level": "INFO",
                "code": "ETC"
              },
              "version": {
                "major": 2,
                "minor": 0,
                "patch": 3
              },
              "description": "Class exposes synchronization and semaphores in its public interface\r\n",
              "isActive": false,
              "properties": [
                
              ],
              "cwe": 0
            }
          ],
          "filters": [
            
          ]
        },
        {
          "code": "STI",
          "name": "STI",
          "description": "Unneeded use of currentThread() call, to call interrupted() ",
          "isActive": true,
          "checkerList": [
            {
              "code": "SuspiciousThreadInterrupted",
              "name": "edu.umd.cs.findbugs.detect.SuspiciousThreadInterrupted",
              "severity": {
                "name": "info",
                "level": "INFO",
                "code": "ETC"
              },
              "version": {
                "major": 2,
                "minor": 0,
                "patch": 3
              },
              "description": "Unneeded use of currentThread() call, to call interrupted() \r\nStatic Thread.interrupted() method invoked on thread instance\r\n",
              "isActive": false,
              "properties": [
                
              ],
              "cwe": 0
            }
          ],
          "filters": [
            
          ]
        },
        {
          "code": "PT",
          "name": "PT",
          "description": "Absolute path traversal in servlet",
          "isActive": true,
          "checkerList": [
            {
              "code": "CrossSiteScripting",
              "name": "edu.umd.cs.findbugs.detect.CrossSiteScripting",
              "severity": {
                "name": "info",
                "level": "INFO",
                "code": "ETC"
              },
              "version": {
                "major": 2,
                "minor": 0,
                "patch": 3
              },
              "description": "HTTP cookie formed from untrusted input\r\nHTTP Response splitting vulnerability\r\nAbsolute path traversal in servlet\r\nRelative path traversal in servlet\r\nJSP reflected cross site scripting vulnerability\r\nServlet reflected cross site scripting vulnerability in error page\r\nServlet reflected cross site scripting vulnerability\r\n",
              "isActive": false,
              "properties": [
                
              ],
              "cwe": 0
            }
          ],
          "filters": [
            
          ]
        },
        {
          "code": "ISC",
          "name": "ISC",
          "description": "Needless instantiation of class that only supplies static methods",
          "isActive": true,
          "checkerList": [
            {
              "code": "InstantiateStaticClass",
              "name": "edu.umd.cs.findbugs.detect.InstantiateStaticClass",
              "severity": {
                "name": "major",
                "level": "WARN",
                "code": "MAJ"
              },
              "version": {
                "major": 2,
                "minor": 0,
                "patch": 3
              },
              "description": "Needless instantiation of class that only supplies static methods\r\n",
              "isActive": true,
              "properties": [
                
              ],
              "cwe": 0
            }
          ],
          "filters": [
            
          ]
        },
        {
          "code": "STCAL",
          "name": "STCAL",
          "description": "Call to static Calendar",
          "isActive": true,
          "checkerList": [
            {
              "code": "StaticCalendarDetector",
              "name": "edu.umd.cs.findbugs.detect.StaticCalendarDetector",
              "severity": {
                "name": "info",
                "level": "INFO",
                "code": "ETC"
              },
              "version": {
                "major": 2,
                "minor": 0,
                "patch": 3
              },
              "description": "Call to static Calendar\r\nCall to static DateFormat\r\nStatic Calendar field\r\nStatic DateFormat\r\n",
              "isActive": false,
              "properties": [
                
              ],
              "cwe": 0
            }
          ],
          "filters": [
            
          ]
        },
        {
          "code": "PZ",
          "name": "PZ",
          "description": "Don\u0027t reuse entry objects in iterators",
          "isActive": true,
          "checkerList": [
            {
              "code": "FindPuzzlers",
              "name": "edu.umd.cs.findbugs.detect.FindPuzzlers",
              "severity": {
                "name": "critical",
                "level": "ERROR",
                "code": "CRI"
              },
              "version": {
                "major": 2,
                "minor": 0,
                "patch": 3
              },
              "description": "Primitive value is boxed and then immediately unboxed\r\nPrimitive value is boxed then unboxed to perform primitive coercion\r\nPrimitive value is unboxed and coerced for ternary operator\r\nBoxed value is unboxed and then immediately reboxed\r\ncompareTo()/compare() returns Integer.MIN_VALUE\r\nUseless assignment in return statement\r\nOverwritten increment\r\nBad constant value for month\r\nAdding elements of an entry set may fail due to reuse of Entry objects\r\nInvocation of hashCode on an array\r\nInvocation of toString on an unnamed array\r\nInvocation of toString on an array\r\nInvocation of equals() on an array, which is equivalent to \u003d\u003d\r\n32 bit int shifted by an amount not in the range -31..31\r\nResult of integer multiplication cast to long\r\nUnsigned right shift cast to short/byte\r\nSuperclass uses subclass during initialization\r\nJUnit assertion in run method will not be noticed by JUnit\r\nComputation of average could overflow\r\nCheck for oddness that won\u0027t work for negative numbers \r\nInteger multiply of result of integer remainder\r\nDon\u0027t reuse entry objects in iterators\r\nNegating the result of compareTo()/compare()\r\n",
              "isActive": true,
              "properties": [
                
              ],
              "cwe": 0
            }
          ],
          "filters": [
            
          ]
        },
        {
          "code": "HE",
          "name": "HE",
          "description": "Class defines equals() but not hashCode()",
          "isActive": true,
          "checkerList": [
            {
              "code": "FindHEmismatch",
              "name": "edu.umd.cs.findbugs.detect.FindHEmismatch",
              "severity": {
                "name": "critical",
                "level": "ERROR",
                "code": "CRI"
              },
              "version": {
                "major": 2,
                "minor": 0,
                "patch": 3
              },
              "description": "Abstract class defines covariant compareTo() method\r\nCovariant compareTo() method defined\r\nAbstract class defines covariant equals() method\r\nClass defines compareTo(...) and uses Object.equals()\r\nClass doesn\u0027t override equals in superclass\r\nCovariant equals() method defined for enum\r\nequals() method defined that doesn\u0027t override equals(Object)\r\nequals() method defined that doesn\u0027t override Object.equals(Object)\r\nCovariant equals() method defined\r\nCovariant equals() method defined, Object.equals(Object) inherited\r\nClass defines equals() but not hashCode()\r\nClass defines equals() and uses Object.hashCode()\r\nClass defines hashCode() but not equals()\r\nClass defines hashCode() and uses Object.equals()\r\nClass inherits equals() and uses Object.hashCode()\r\nSignature declares use of unhashable class in hashed construct\r\nUse of class without a hashCode() method in a hashed data structure\r\n",
              "isActive": true,
              "properties": [
                
              ],
              "cwe": 0
            }
          ],
          "filters": [
            
          ]
        },
        {
          "code": "MTIA",
          "name": "MTIA",
          "description": "Class extends Servlet class and uses instance variables",
          "isActive": true,
          "checkerList": [
            {
              "code": "MultithreadedInstanceAccess",
              "name": "edu.umd.cs.findbugs.detect.MultithreadedInstanceAccess",
              "severity": {
                "name": "info",
                "level": "INFO",
                "code": "ETC"
              },
              "version": {
                "major": 2,
                "minor": 0,
                "patch": 3
              },
              "description": "Class extends Servlet class and uses instance variables\r\nClass extends Struts Action class and uses instance variables\r\n",
              "isActive": true,
              "properties": [
                
              ],
              "cwe": 0
            }
          ],
          "filters": [
            
          ]
        },
        {
          "code": "Wa",
          "name": "Wa",
          "description": "Condition.await() not in loop ",
          "isActive": true,
          "checkerList": [
            {
              "code": "WaitInLoop",
              "name": "edu.umd.cs.findbugs.detect.WaitInLoop",
              "severity": {
                "name": "critical",
                "level": "ERROR",
                "code": "CRI"
              },
              "version": {
                "major": 2,
                "minor": 0,
                "patch": 3
              },
              "description": "Using notify() rather than notifyAll()\r\nCondition.await() not in loop \r\nWait not in loop \r\n",
              "isActive": true,
              "properties": [
                
              ],
              "cwe": 0
            }
          ],
          "filters": [
            
          ]
        },
        {
          "code": "XFB",
          "name": "XFB",
          "description": "Method directly allocates a specific implementation of xml interfaces",
          "isActive": true,
          "checkerList": [
            {
              "code": "XMLFactoryBypass",
              "name": "edu.umd.cs.findbugs.detect.XMLFactoryBypass",
              "severity": {
                "name": "info",
                "level": "INFO",
                "code": "ETC"
              },
              "version": {
                "major": 2,
                "minor": 0,
                "patch": 3
              },
              "description": "Method directly allocates a specific implementation of xml interfaces\r\n",
              "isActive": false,
              "properties": [
                
              ],
              "cwe": 0
            }
          ],
          "filters": [
            
          ]
        },
        {
          "code": "JLM",
          "name": "JLM",
          "description": "Synchronization performed on Lock",
          "isActive": true,
          "checkerList": [
            {
              "code": "FindJSR166LockMonitorenter",
              "name": "edu.umd.cs.findbugs.detect.FindJSR166LockMonitorenter",
              "severity": {
                "name": "info",
                "level": "INFO",
                "code": "ETC"
              },
              "version": {
                "major": 2,
                "minor": 0,
                "patch": 3
              },
              "description": "Synchronization performed on Lock\r\nSynchronization performed on util.concurrent instance\r\nUsing monitor style wait methods on util.concurrent abstraction\r\n",
              "isActive": false,
              "properties": [
                
              ],
              "cwe": 0
            }
          ],
          "filters": [
            
          ]
        },
        {
          "code": "UwF",
          "name": "UwF",
          "description": "Field not initialized in constructor but dereferenced without null check",
          "isActive": true,
          "checkerList": [
            {
              "code": "UnreadFields",
              "name": "edu.umd.cs.findbugs.detect.UnreadFields",
              "severity": {
                "name": "major",
                "level": "WARN",
                "code": "MAJ"
              },
              "version": {
                "major": 2,
                "minor": 0,
                "patch": 3
              },
              "description": "Read of unwritten field\r\nRead of unwritten public or protected field\r\nShould be a static inner class\r\nCould be refactored into a named static inner class\r\nCould be refactored into a static inner class\r\nDeadly embrace of non-static inner class and thread local\r\nUnread field: should this field be static?\r\nWrite to static field from instance method\r\nUnread field\r\nUnread public/protected field\r\nUnused field\r\nUnused public or protected field\r\nField not initialized in constructor but dereferenced without null check\r\nField only ever set to null\r\nUnwritten field\r\nUnwritten public or protected field\r\n",
              "isActive": true,
              "properties": [
                
              ],
              "cwe": 0
            }
          ],
          "filters": [
            
          ]
        },
        {
          "code": "No",
          "name": "No",
          "description": "Using notify() rather than notifyAll()",
          "isActive": true,
          "checkerList": [
            {
              "code": "WaitInLoop",
              "name": "edu.umd.cs.findbugs.detect.WaitInLoop",
              "severity": {
                "name": "critical",
                "level": "ERROR",
                "code": "CRI"
              },
              "version": {
                "major": 2,
                "minor": 0,
                "patch": 3
              },
              "description": "Using notify() rather than notifyAll()\r\nCondition.await() not in loop \r\nWait not in loop \r\n",
              "isActive": true,
              "properties": [
                
              ],
              "cwe": 0
            }
          ],
          "filters": [
            
          ]
        },
        {
          "code": "IA",
          "name": "IA",
          "description": "Potentially ambiguous invocation of either an inherited or outer method",
          "isActive": true,
          "checkerList": [
            {
              "code": "ConfusionBetweenInheritedAndOuterMethod",
              "name": "edu.umd.cs.findbugs.detect.ConfusionBetweenInheritedAndOuterMethod",
              "severity": {
                "name": "info",
                "level": "INFO",
                "code": "ETC"
              },
              "version": {
                "major": 2,
                "minor": 0,
                "patch": 3
              },
              "description": "Potentially ambiguous invocation of either an inherited or outer method\r\n",
              "isActive": false,
              "properties": [
                
              ],
              "cwe": 0
            }
          ],
          "filters": [
            
          ]
        },
        {
          "code": "OS",
          "name": "OS",
          "description": "Method may fail to close stream",
          "isActive": true,
          "checkerList": [
            {
              "code": "FindOpenStream",
              "name": "edu.umd.cs.findbugs.detect.FindOpenStream",
              "severity": {
                "name": "info",
                "level": "INFO",
                "code": "ETC"
              },
              "version": {
                "major": 2,
                "minor": 0,
                "patch": 3
              },
              "description": "Method may fail to close database resource\r\nMethod may fail to close database resource on exception\r\nMethod may fail to close stream\r\nMethod may fail to close stream on exception\r\n",
              "isActive": true,
              "properties": [
                
              ],
              "cwe": 0
            }
          ],
          "filters": [
            
          ]
        },
        {
          "code": "IC",
          "name": "IC",
          "description": "Initialization circularity",
          "isActive": true,
          "checkerList": [
            {
              "code": "InitializationChain",
              "name": "edu.umd.cs.findbugs.detect.InitializationChain",
              "severity": {
                "name": "info",
                "level": "INFO",
                "code": "ETC"
              },
              "version": {
                "major": 2,
                "minor": 0,
                "patch": 3
              },
              "description": "Initialization circularity\r\nStatic initializer creates instance before all static final fields assigned\r\n",
              "isActive": false,
              "properties": [
                
              ],
              "cwe": 0
            },
            {
              "code": "FindPuzzlers",
              "name": "edu.umd.cs.findbugs.detect.FindPuzzlers",
              "severity": {
                "name": "critical",
                "level": "ERROR",
                "code": "CRI"
              },
              "version": {
                "major": 2,
                "minor": 0,
                "patch": 3
              },
              "description": "Primitive value is boxed and then immediately unboxed\r\nPrimitive value is boxed then unboxed to perform primitive coercion\r\nPrimitive value is unboxed and coerced for ternary operator\r\nBoxed value is unboxed and then immediately reboxed\r\ncompareTo()/compare() returns Integer.MIN_VALUE\r\nUseless assignment in return statement\r\nOverwritten increment\r\nBad constant value for month\r\nAdding elements of an entry set may fail due to reuse of Entry objects\r\nInvocation of hashCode on an array\r\nInvocation of toString on an unnamed array\r\nInvocation of toString on an array\r\nInvocation of equals() on an array, which is equivalent to \u003d\u003d\r\n32 bit int shifted by an amount not in the range -31..31\r\nResult of integer multiplication cast to long\r\nUnsigned right shift cast to short/byte\r\nSuperclass uses subclass during initialization\r\nJUnit assertion in run method will not be noticed by JUnit\r\nComputation of average could overflow\r\nCheck for oddness that won\u0027t work for negative numbers \r\nInteger multiply of result of integer remainder\r\nDon\u0027t reuse entry objects in iterators\r\nNegating the result of compareTo()/compare()\r\n",
              "isActive": true,
              "properties": [
                
              ],
              "cwe": 0
            }
          ],
          "filters": [
            
          ]
        },
        {
          "code": "BOA",
          "name": "BOA",
          "description": "Class overrides a method implemented in super class Adapter wrongly",
          "isActive": true,
          "checkerList": [
            {
              "code": "BadlyOverriddenAdapter",
              "name": "edu.umd.cs.findbugs.detect.BadlyOverriddenAdapter",
              "severity": {
                "name": "info",
                "level": "INFO",
                "code": "ETC"
              },
              "version": {
                "major": 2,
                "minor": 0,
                "patch": 3
              },
              "description": "Class overrides a method implemented in super class Adapter wrongly\r\n",
              "isActive": false,
              "properties": [
                
              ],
              "cwe": 0
            }
          ],
          "filters": [
            
          ]
        },
        {
          "code": "ICAST",
          "name": "ICAST",
          "description": "Integral division result cast to double or float",
          "isActive": true,
          "checkerList": [
            {
              "code": "IntCast2LongAsInstant",
              "name": "edu.umd.cs.findbugs.detect.IntCast2LongAsInstant",
              "severity": {
                "name": "major",
                "level": "WARN",
                "code": "MAJ"
              },
              "version": {
                "major": 2,
                "minor": 0,
                "patch": 3
              },
              "description": "int value converted to long and used as absolute time\r\n",
              "isActive": true,
              "properties": [
                
              ],
              "cwe": 0
            },
            {
              "code": "FindPuzzlers",
              "name": "edu.umd.cs.findbugs.detect.FindPuzzlers",
              "severity": {
                "name": "critical",
                "level": "ERROR",
                "code": "CRI"
              },
              "version": {
                "major": 2,
                "minor": 0,
                "patch": 3
              },
              "description": "Primitive value is boxed and then immediately unboxed\r\nPrimitive value is boxed then unboxed to perform primitive coercion\r\nPrimitive value is unboxed and coerced for ternary operator\r\nBoxed value is unboxed and then immediately reboxed\r\ncompareTo()/compare() returns Integer.MIN_VALUE\r\nUseless assignment in return statement\r\nOverwritten increment\r\nBad constant value for month\r\nAdding elements of an entry set may fail due to reuse of Entry objects\r\nInvocation of hashCode on an array\r\nInvocation of toString on an unnamed array\r\nInvocation of toString on an array\r\nInvocation of equals() on an array, which is equivalent to \u003d\u003d\r\n32 bit int shifted by an amount not in the range -31..31\r\nResult of integer multiplication cast to long\r\nUnsigned right shift cast to short/byte\r\nSuperclass uses subclass during initialization\r\nJUnit assertion in run method will not be noticed by JUnit\r\nComputation of average could overflow\r\nCheck for oddness that won\u0027t work for negative numbers \r\nInteger multiply of result of integer remainder\r\nDon\u0027t reuse entry objects in iterators\r\nNegating the result of compareTo()/compare()\r\n",
              "isActive": true,
              "properties": [
                
              ],
              "cwe": 0
            },
            {
              "code": "IDivResultCastToDouble",
              "name": "edu.umd.cs.findbugs.detect.IDivResultCastToDouble",
              "severity": {
                "name": "major",
                "level": "WARN",
                "code": "MAJ"
              },
              "version": {
                "major": 2,
                "minor": 0,
                "patch": 3
              },
              "description": "Integral division result cast to double or float\r\nIntegral value cast to double and then passed to Math.ceil\r\nint value cast to float and then passed to Math.round\r\n",
              "isActive": true,
              "properties": [
                
              ],
              "cwe": 0
            }
          ],
          "filters": [
            
          ]
        },
        {
          "code": "IP",
          "name": "IP",
          "description": "A parameter is dead upon entry to a method but overwritten",
          "isActive": true,
          "checkerList": [
            {
              "code": "FindDeadLocalStores",
              "name": "edu.umd.cs.findbugs.detect.FindDeadLocalStores",
              "severity": {
                "name": "major",
                "level": "WARN",
                "code": "MAJ"
              },
              "version": {
                "major": 2,
                "minor": 0,
                "patch": 3
              },
              "description": "Useless increment in return statement\r\nDead store to local variable\r\nDead store of null to local variable\r\nDead store to local variable that shadows field\r\nDead store of class literal\r\nA parameter is dead upon entry to a method but overwritten\r\n",
              "isActive": true,
              "properties": [
                
              ],
              "cwe": 563
            }
          ],
          "filters": [
            
          ]
        },
        {
          "code": "SF",
          "name": "SF",
          "description": "Dead store due to switch statement fall through",
          "isActive": true,
          "checkerList": [
            {
              "code": "SwitchFallthrough",
              "name": "edu.umd.cs.findbugs.detect.SwitchFallthrough",
              "severity": {
                "name": "info",
                "level": "INFO",
                "code": "ETC"
              },
              "version": {
                "major": 2,
                "minor": 0,
                "patch": 3
              },
              "description": "Dead store due to switch statement fall through\r\nDead store due to switch statement fall through to throw\r\nSwitch statement found where one case falls through to the next case\r\nSwitch statement found where default case is missing\r\n",
              "isActive": false,
              "properties": [
                
              ],
              "cwe": 0
            }
          ],
          "filters": [
            
          ]
        },
        {
          "code": "IO",
          "name": "IO",
          "description": "Doomed attempt to append to an object output stream",
          "isActive": true,
          "checkerList": [
            {
              "code": "AppendingToAnObjectOutputStream",
              "name": "edu.umd.cs.findbugs.detect.AppendingToAnObjectOutputStream",
              "severity": {
                "name": "info",
                "level": "INFO",
                "code": "ETC"
              },
              "version": {
                "major": 2,
                "minor": 0,
                "patch": 3
              },
              "description": "Doomed attempt to append to an object output stream\r\n",
              "isActive": false,
              "properties": [
                
              ],
              "cwe": 0
            }
          ],
          "filters": [
            
          ]
        },
        {
          "code": "IL",
          "name": "IL",
          "description": "A collection is added to itself",
          "isActive": true,
          "checkerList": [
            {
              "code": "InfiniteLoop",
              "name": "edu.umd.cs.findbugs.detect.InfiniteLoop",
              "severity": {
                "name": "critical",
                "level": "ERROR",
                "code": "CRI"
              },
              "version": {
                "major": 2,
                "minor": 0,
                "patch": 3
              },
              "description": "An apparent infinite loop\r\n",
              "isActive": true,
              "properties": [
                
              ],
              "cwe": 0
            },
            {
              "code": "InfiniteRecursiveLoop",
              "name": "edu.umd.cs.findbugs.detect.InfiniteRecursiveLoop",
              "severity": {
                "name": "critical",
                "level": "ERROR",
                "code": "CRI"
              },
              "version": {
                "major": 2,
                "minor": 0,
                "patch": 3
              },
              "description": "A collection is added to itself\r\nAn apparent infinite recursive loop\r\n",
              "isActive": true,
              "properties": [
                
              ],
              "cwe": 674
            }
          ],
          "filters": [
            
          ]
        },
        {
          "code": "IM",
          "name": "IM",
          "description": "Computation of average could overflow",
          "isActive": true,
          "checkerList": [
            {
              "code": "FindPuzzlers",
              "name": "edu.umd.cs.findbugs.detect.FindPuzzlers",
              "severity": {
                "name": "critical",
                "level": "ERROR",
                "code": "CRI"
              },
              "version": {
                "major": 2,
                "minor": 0,
                "patch": 3
              },
              "description": "Primitive value is boxed and then immediately unboxed\r\nPrimitive value is boxed then unboxed to perform primitive coercion\r\nPrimitive value is unboxed and coerced for ternary operator\r\nBoxed value is unboxed and then immediately reboxed\r\ncompareTo()/compare() returns Integer.MIN_VALUE\r\nUseless assignment in return statement\r\nOverwritten increment\r\nBad constant value for month\r\nAdding elements of an entry set may fail due to reuse of Entry objects\r\nInvocation of hashCode on an array\r\nInvocation of toString on an unnamed array\r\nInvocation of toString on an array\r\nInvocation of equals() on an array, which is equivalent to \u003d\u003d\r\n32 bit int shifted by an amount not in the range -31..31\r\nResult of integer multiplication cast to long\r\nUnsigned right shift cast to short/byte\r\nSuperclass uses subclass during initialization\r\nJUnit assertion in run method will not be noticed by JUnit\r\nComputation of average could overflow\r\nCheck for oddness that won\u0027t work for negative numbers \r\nInteger multiply of result of integer remainder\r\nDon\u0027t reuse entry objects in iterators\r\nNegating the result of compareTo()/compare()\r\n",
              "isActive": true,
              "properties": [
                
              ],
              "cwe": 0
            }
          ],
          "filters": [
            
          ]
        },
        {
          "code": "SI",
          "name": "SI",
          "description": "Static initializer creates instance before all static final fields assigned",
          "isActive": true,
          "checkerList": [
            {
              "code": "InitializationChain",
              "name": "edu.umd.cs.findbugs.detect.InitializationChain",
              "severity": {
                "name": "info",
                "level": "INFO",
                "code": "ETC"
              },
              "version": {
                "major": 2,
                "minor": 0,
                "patch": 3
              },
              "description": "Initialization circularity\r\nStatic initializer creates instance before all static final fields assigned\r\n",
              "isActive": false,
              "properties": [
                
              ],
              "cwe": 0
            }
          ],
          "filters": [
            
          ]
        },
        {
          "code": "AT",
          "name": "AT",
          "description": "Sequence of calls to concurrent abstraction may not be atomic",
          "isActive": true,
          "checkerList": [
            {
              "code": "AtomicityProblem",
              "name": "edu.umd.cs.findbugs.detect.AtomicityProblem",
              "severity": {
                "name": "info",
                "level": "INFO",
                "code": "ETC"
              },
              "version": {
                "major": 2,
                "minor": 0,
                "patch": 3
              },
              "description": "Sequence of calls to concurrent abstraction may not be atomic\r\n",
              "isActive": false,
              "properties": [
                
              ],
              "cwe": 0
            }
          ],
          "filters": [
            
          ]
        },
        {
          "code": "SS",
          "name": "SS",
          "description": "Unread field: should this field be static?",
          "isActive": true,
          "checkerList": [
            {
              "code": "UnreadFields",
              "name": "edu.umd.cs.findbugs.detect.UnreadFields",
              "severity": {
                "name": "major",
                "level": "WARN",
                "code": "MAJ"
              },
              "version": {
                "major": 2,
                "minor": 0,
                "patch": 3
              },
              "description": "Read of unwritten field\r\nRead of unwritten public or protected field\r\nShould be a static inner class\r\nCould be refactored into a named static inner class\r\nCould be refactored into a static inner class\r\nDeadly embrace of non-static inner class and thread local\r\nUnread field: should this field be static?\r\nWrite to static field from instance method\r\nUnread field\r\nUnread public/protected field\r\nUnused field\r\nUnused public or protected field\r\nField not initialized in constructor but dereferenced without null check\r\nField only ever set to null\r\nUnwritten field\r\nUnwritten public or protected field\r\n",
              "isActive": true,
              "properties": [
                
              ],
              "cwe": 0
            }
          ],
          "filters": [
            
          ]
        },
        {
          "code": "USELESS_STRING",
          "name": "USELESS_STRING",
          "description": "Array formatted in useless way using format string",
          "isActive": true,
          "checkerList": [
            {
              "code": "FindPuzzlers",
              "name": "edu.umd.cs.findbugs.detect.FindPuzzlers",
              "severity": {
                "name": "critical",
                "level": "ERROR",
                "code": "CRI"
              },
              "version": {
                "major": 2,
                "minor": 0,
                "patch": 3
              },
              "description": "Primitive value is boxed and then immediately unboxed\r\nPrimitive value is boxed then unboxed to perform primitive coercion\r\nPrimitive value is unboxed and coerced for ternary operator\r\nBoxed value is unboxed and then immediately reboxed\r\ncompareTo()/compare() returns Integer.MIN_VALUE\r\nUseless assignment in return statement\r\nOverwritten increment\r\nBad constant value for month\r\nAdding elements of an entry set may fail due to reuse of Entry objects\r\nInvocation of hashCode on an array\r\nInvocation of toString on an unnamed array\r\nInvocation of toString on an array\r\nInvocation of equals() on an array, which is equivalent to \u003d\u003d\r\n32 bit int shifted by an amount not in the range -31..31\r\nResult of integer multiplication cast to long\r\nUnsigned right shift cast to short/byte\r\nSuperclass uses subclass during initialization\r\nJUnit assertion in run method will not be noticed by JUnit\r\nComputation of average could overflow\r\nCheck for oddness that won\u0027t work for negative numbers \r\nInteger multiply of result of integer remainder\r\nDon\u0027t reuse entry objects in iterators\r\nNegating the result of compareTo()/compare()\r\n",
              "isActive": true,
              "properties": [
                
              ],
              "cwe": 0
            },
            {
              "code": "FormatStringChecker",
              "name": "edu.umd.cs.findbugs.detect.FormatStringChecker",
              "severity": {
                "name": "critical",
                "level": "ERROR",
                "code": "CRI"
              },
              "version": {
                "major": 2,
                "minor": 0,
                "patch": 3
              },
              "description": "Format string placeholder incompatible with passed argument\r\nThe type of a supplied argument doesn\u0027t match format specifier\r\nArray formatted in useless way using format string\r\nNon-Boolean argument formatted using %b format specifier\r\nMessageFormat supplied where printf style format expected\r\nMore arguments are passed than are actually used in the format string\r\nIllegal format string\r\nFormat string references missing argument\r\nNo previous argument for format string\r\nFormat string should use %n rather than \\n\r\n",
              "isActive": true,
              "properties": [
                
              ],
              "cwe": 0
            }
          ],
          "filters": [
            
          ]
        },
        {
          "code": "SP",
          "name": "SP",
          "description": "Method spins on field",
          "isActive": true,
          "checkerList": [
            {
              "code": "FindSpinLoop",
              "name": "edu.umd.cs.findbugs.detect.FindSpinLoop",
              "severity": {
                "name": "info",
                "level": "INFO",
                "code": "ETC"
              },
              "version": {
                "major": 2,
                "minor": 0,
                "patch": 3
              },
              "description": "Method spins on field\r\n",
              "isActive": false,
              "properties": [
                
              ],
              "cwe": 0
            }
          ],
          "filters": [
            
          ]
        },
        {
          "code": "IS",
          "name": "IS",
          "description": "Inconsistent synchronization",
          "isActive": true,
          "checkerList": [
            {
              "code": "FindInconsistentSync2",
              "name": "edu.umd.cs.findbugs.detect.FindInconsistentSync2",
              "severity": {
                "name": "major",
                "level": "WARN",
                "code": "MAJ"
              },
              "version": {
                "major": 2,
                "minor": 0,
                "patch": 3
              },
              "description": "Inconsistent synchronization\r\nField not guarded against concurrent access\r\nMutable servlet field\r\n",
              "isActive": true,
              "properties": [
                
              ],
              "cwe": 0
            }
          ],
          "filters": [
            
          ]
        },
        {
          "code": "UMAC",
          "name": "UMAC",
          "description": "Uncallable method defined in anonymous class",
          "isActive": true,
          "checkerList": [
            {
              "code": "UncallableMethodOfAnonymousClass",
              "name": "edu.umd.cs.findbugs.detect.UncallableMethodOfAnonymousClass",
              "severity": {
                "name": "info",
                "level": "INFO",
                "code": "ETC"
              },
              "version": {
                "major": 2,
                "minor": 0,
                "patch": 3
              },
              "description": "Uncallable method defined in anonymous class\r\n",
              "isActive": false,
              "properties": [
                
              ],
              "cwe": 0
            }
          ],
          "filters": [
            
          ]
        },
        {
          "code": "BSHIFT",
          "name": "BSHIFT",
          "description": "32 bit int shifted by an amount not in the range -31..31",
          "isActive": true,
          "checkerList": [
            {
              "code": "FindPuzzlers",
              "name": "edu.umd.cs.findbugs.detect.FindPuzzlers",
              "severity": {
                "name": "critical",
                "level": "ERROR",
                "code": "CRI"
              },
              "version": {
                "major": 2,
                "minor": 0,
                "patch": 3
              },
              "description": "Primitive value is boxed and then immediately unboxed\r\nPrimitive value is boxed then unboxed to perform primitive coercion\r\nPrimitive value is unboxed and coerced for ternary operator\r\nBoxed value is unboxed and then immediately reboxed\r\ncompareTo()/compare() returns Integer.MIN_VALUE\r\nUseless assignment in return statement\r\nOverwritten increment\r\nBad constant value for month\r\nAdding elements of an entry set may fail due to reuse of Entry objects\r\nInvocation of hashCode on an array\r\nInvocation of toString on an unnamed array\r\nInvocation of toString on an array\r\nInvocation of equals() on an array, which is equivalent to \u003d\u003d\r\n32 bit int shifted by an amount not in the range -31..31\r\nResult of integer multiplication cast to long\r\nUnsigned right shift cast to short/byte\r\nSuperclass uses subclass during initialization\r\nJUnit assertion in run method will not be noticed by JUnit\r\nComputation of average could overflow\r\nCheck for oddness that won\u0027t work for negative numbers \r\nInteger multiply of result of integer remainder\r\nDon\u0027t reuse entry objects in iterators\r\nNegating the result of compareTo()/compare()\r\n",
              "isActive": true,
              "properties": [
                
              ],
              "cwe": 0
            }
          ],
          "filters": [
            
          ]
        },
        {
          "code": "RV",
          "name": "RV",
          "description": "Random value from 0 to 1 is coerced to the integer 0",
          "isActive": true,
          "checkerList": [
            {
              "code": "DumbMethods",
              "name": "edu.umd.cs.findbugs.detect.DumbMethods",
              "severity": {
                "name": "info",
                "level": "INFO",
                "code": "ETC"
              },
              "version": {
                "major": 2,
                "minor": 0,
                "patch": 3
              },
              "description": "Equals method should not assume anything about the type of its argument\r\nBitwise add of signed byte value\r\nBitwise OR of signed byte value\r\nCan\u0027t use reflection to check for presence of annotation without runtime retention\r\nReversed method arguments\r\nBigDecimal constructed from double that isn\u0027t represented precisely\r\nhasNext method invokes next\r\nMaps and sets of URLs can be performance hogs\r\nD\u0027oh! A nonsensical method invocation\r\nFutile attempt to change max pool size of ScheduledThreadPoolExecutor\r\nDouble.longBitsToDouble invoked on an int\r\nRandom object created and used only once\r\nCreation of ScheduledThreadPoolExecutor with zero core threads\r\nThread passed where Runnable expected\r\nUseless/vacuous call to EasyMock method\r\nMethod invokes inefficient Boolean constructor; use Boolean.valueOf(...) instead\r\nBoxing/unboxing to parse a primitive\r\nMethod allocates a boxed primitive just to call toString\r\nConsider using Locale parameterized version of invoked method\r\nMethod invokes System.exit(...)\r\nExplicit garbage collection; extremely dubious except in benchmarking code\r\nMonitor wait() called on Condition\r\nMethod allocates an object, only to get the class object\r\nUse the nextInt method of Random rather than nextDouble to generate a random integer\r\nMethod invokes dangerous method runFinalizersOnExit\r\nMethod invokes inefficient new String(String) constructor\r\nMethod invokes toString() method on a String\r\nMethod invokes inefficient new String() constructor\r\nA thread was created using the default empty run method\r\nBad comparison of int value with long constant\r\nBad comparison of nonnegative value with negative constant\r\nBad comparison of signed byte\r\nInteger remainder modulo 1\r\nVacuous bit mask operation on integer value\r\nVacuous comparison of integer value\r\nImmediate dereference of the result of readLine()\r\nRandom value from 0 to 1 is coerced to the integer 0\r\nBad attempt to compute absolute value of signed 32-bit hashcode \r\nBad attempt to compute absolute value of signed random integer\r\nRemainder of hashCode could be negative\r\nRemainder of 32-bit signed random integer\r\nCertain swing methods needs to be invoked in Swing thread\r\n",
              "isActive": false,
              "properties": [
                
              ],
              "cwe": 0
            },
            {
              "code": "DontIgnoreResultOfPutIfAbsent",
              "name": "edu.umd.cs.findbugs.detect.DontIgnoreResultOfPutIfAbsent",
              "severity": {
                "name": "info",
                "level": "INFO",
                "code": "ETC"
              },
              "version": {
                "major": 2,
                "minor": 0,
                "patch": 3
              },
              "description": "Return value of putIfAbsent ignored, value passed to putIfAbsent reused\r\n",
              "isActive": false,
              "properties": [
                
              ],
              "cwe": 0
            },
            {
              "code": "MethodReturnCheck",
              "name": "edu.umd.cs.findbugs.detect.MethodReturnCheck",
              "severity": {
                "name": "info",
                "level": "INFO",
                "code": "ETC"
              },
              "version": {
                "major": 2,
                "minor": 0,
                "patch": 3
              },
              "description": "Code checks for specific values returned by compareTo\r\nException created and dropped rather than thrown\r\nMethod ignores return value\r\nMethod ignores exceptional return value\r\nMethod ignores return value, is this OK?\r\n",
              "isActive": false,
              "properties": [
                
              ],
              "cwe": 0
            },
            {
              "code": "FindPuzzlers",
              "name": "edu.umd.cs.findbugs.detect.FindPuzzlers",
              "severity": {
                "name": "critical",
                "level": "ERROR",
                "code": "CRI"
              },
              "version": {
                "major": 2,
                "minor": 0,
                "patch": 3
              },
              "description": "Primitive value is boxed and then immediately unboxed\r\nPrimitive value is boxed then unboxed to perform primitive coercion\r\nPrimitive value is unboxed and coerced for ternary operator\r\nBoxed value is unboxed and then immediately reboxed\r\ncompareTo()/compare() returns Integer.MIN_VALUE\r\nUseless assignment in return statement\r\nOverwritten increment\r\nBad constant value for month\r\nAdding elements of an entry set may fail due to reuse of Entry objects\r\nInvocation of hashCode on an array\r\nInvocation of toString on an unnamed array\r\nInvocation of toString on an array\r\nInvocation of equals() on an array, which is equivalent to \u003d\u003d\r\n32 bit int shifted by an amount not in the range -31..31\r\nResult of integer multiplication cast to long\r\nUnsigned right shift cast to short/byte\r\nSuperclass uses subclass during initialization\r\nJUnit assertion in run method will not be noticed by JUnit\r\nComputation of average could overflow\r\nCheck for oddness that won\u0027t work for negative numbers \r\nInteger multiply of result of integer remainder\r\nDon\u0027t reuse entry objects in iterators\r\nNegating the result of compareTo()/compare()\r\n",
              "isActive": true,
              "properties": [
                
              ],
              "cwe": 0
            },
            {
              "code": "BadUseOfReturnValue",
              "name": "edu.umd.cs.findbugs.detect.BadUseOfReturnValue",
              "severity": {
                "name": "info",
                "level": "INFO",
                "code": "ETC"
              },
              "version": {
                "major": 2,
                "minor": 0,
                "patch": 3
              },
              "description": "Method checks to see if result of String.indexOf is positive\r\nMethod discards result of readLine after checking if it is nonnull\r\n",
              "isActive": false,
              "properties": [
                
              ],
              "cwe": 0
            }
          ],
          "filters": [
            
          ]
        },
        {
          "code": "RS",
          "name": "RS",
          "description": "Class\u0027s readObject() method is synchronized",
          "isActive": true,
          "checkerList": [
            {
              "code": "SerializableIdiom",
              "name": "edu.umd.cs.findbugs.detect.SerializableIdiom",
              "severity": {
                "name": "info",
                "level": "INFO",
                "code": "ETC"
              },
              "version": {
                "major": 2,
                "minor": 0,
                "patch": 3
              },
              "description": "Class\u0027s readObject() method is synchronized\r\nNon-transient non-serializable instance field in serializable class\r\nNon-serializable class has a serializable inner class\r\nNon-serializable value stored into instance field of a serializable class\r\nSerializable inner class\r\nMethod must be private in order for serialization to work\r\nserialVersionUID isn\u0027t final\r\nserialVersionUID isn\u0027t long\r\nserialVersionUID isn\u0027t static\r\nClass is Serializable, but doesn\u0027t define serialVersionUID\r\nClass is Serializable but its superclass doesn\u0027t define a void constructor\r\nClass is Externalizable but doesn\u0027t define a void constructor\r\nPrivate readResolve method not inherited by subclasses\r\nThe readResolve method must not be declared as a static method.  \r\nThe readResolve method must be declared with a return type of Object. \r\nTransient field that isn\u0027t set by deserialization. \r\nTransient field of class that isn\u0027t Serializable. \r\nClass\u0027s writeObject() method is synchronized but nothing else is\r\n",
              "isActive": false,
              "properties": [
                
              ],
              "cwe": 0
            }
          ],
          "filters": [
            
          ]
        },
        {
          "code": "SC",
          "name": "SC",
          "description": "Constructor invokes Thread.start()",
          "isActive": true,
          "checkerList": [
            {
              "code": "StartInConstructor",
              "name": "edu.umd.cs.findbugs.detect.StartInConstructor",
              "severity": {
                "name": "major",
                "level": "WARN",
                "code": "MAJ"
              },
              "version": {
                "major": 2,
                "minor": 0,
                "patch": 3
              },
              "description": "Constructor invokes Thread.start()\r\n",
              "isActive": true,
              "properties": [
                
              ],
              "cwe": 0
            }
          ],
          "filters": [
            
          ]
        },
        {
          "code": "SA",
          "name": "SA",
          "description": "Self assignment of field",
          "isActive": true,
          "checkerList": [
            {
              "code": "FindSelfComparison2",
              "name": "edu.umd.cs.findbugs.detect.FindSelfComparison2",
              "severity": {
                "name": "major",
                "level": "WARN",
                "code": "MAJ"
              },
              "version": {
                "major": 2,
                "minor": 0,
                "patch": 3
              },
              "description": "Self comparison of field with itself\r\nNonsensical self computation involving a field (e.g., x \u0026 x)\r\nSelf comparison of value with itself\r\nNonsensical self computation involving a variable (e.g., x \u0026 x)\r\n",
              "isActive": true,
              "properties": [
                
              ],
              "cwe": 0
            },
            {
              "code": "FindSelfComparison",
              "name": "edu.umd.cs.findbugs.detect.FindSelfComparison",
              "severity": {
                "name": "major",
                "level": "WARN",
                "code": "MAJ"
              },
              "version": {
                "major": 2,
                "minor": 0,
                "patch": 3
              },
              "description": "Double assignment of field\r\nSelf comparison of field with itself\r\nNonsensical self computation involving a field (e.g., x \u0026 x)\r\nSelf comparison of value with itself\r\nNonsensical self computation involving a variable (e.g., x \u0026 x)\r\n",
              "isActive": true,
              "properties": [
                
              ],
              "cwe": 0
            },
            {
              "code": "FindFieldSelfAssignment",
              "name": "edu.umd.cs.findbugs.detect.FindFieldSelfAssignment",
              "severity": {
                "name": "major",
                "level": "WARN",
                "code": "MAJ"
              },
              "version": {
                "major": 2,
                "minor": 0,
                "patch": 3
              },
              "description": "Self assignment of field\r\nDouble assignment of local variable \r\n",
              "isActive": true,
              "properties": [
                
              ],
              "cwe": 0
            },
            {
              "code": "FindLocalSelfAssignment2",
              "name": "edu.umd.cs.findbugs.detect.FindLocalSelfAssignment2",
              "severity": {
                "name": "major",
                "level": "WARN",
                "code": "MAJ"
              },
              "version": {
                "major": 2,
                "minor": 0,
                "patch": 3
              },
              "description": "Self assignment of local variable\r\nSelf assignment of local rather than assignment to field\r\n",
              "isActive": true,
              "properties": [
                
              ],
              "cwe": 0
            }
          ],
          "filters": [
            
          ]
        },
        {
          "code": "AM",
          "name": "AM",
          "description": "Creates an empty jar file entry",
          "isActive": true,
          "checkerList": [
            {
              "code": "EmptyZipFileEntry",
              "name": "edu.umd.cs.findbugs.detect.EmptyZipFileEntry",
              "severity": {
                "name": "info",
                "level": "INFO",
                "code": "ETC"
              },
              "version": {
                "major": 2,
                "minor": 0,
                "patch": 3
              },
              "description": "Creates an empty jar file entry\r\nCreates an empty zip file entry\r\n",
              "isActive": false,
              "properties": [
                
              ],
              "cwe": 0
            }
          ],
          "filters": [
            
          ]
        },
        {
          "code": "RC",
          "name": "RC",
          "description": "Suspicious reference comparison",
          "isActive": true,
          "checkerList": [
            {
              "code": "FindRefComparison",
              "name": "edu.umd.cs.findbugs.detect.FindRefComparison",
              "severity": {
                "name": "critical",
                "level": "ERROR",
                "code": "CRI"
              },
              "version": {
                "major": 2,
                "minor": 0,
                "patch": 3
              },
              "description": "D\u0027oh! A nonsensical method invocation\r\nequals() used to compare array and nonarray\r\nInvocation of equals() on an array, which is equivalent to \u003d\u003d\r\nequals(...) used to compare incompatible arrays\r\nCall to equals(null)\r\nCall to equals() comparing unrelated class and interface\r\nCall to equals() comparing different interface types\r\nCall to equals() comparing different types\r\nUsing pointer equality to compare different types\r\nComparison of String parameter using \u003d\u003d or !\u003d\r\nComparison of String objects using \u003d\u003d or !\u003d\r\nSuspicious reference comparison\r\nSuspicious reference comparison to constant\r\nSuspicious reference comparison of Boolean values\r\n",
              "isActive": true,
              "properties": [
                
              ],
              "cwe": 0
            }
          ],
          "filters": [
            
          ]
        },
        {
          "code": "IJU",
          "name": "IJU",
          "description": "TestCase declares a bad suite method ",
          "isActive": true,
          "checkerList": [
            {
              "code": "InvalidJUnitTest",
              "name": "edu.umd.cs.findbugs.detect.InvalidJUnitTest",
              "severity": {
                "name": "info",
                "level": "INFO",
                "code": "ETC"
              },
              "version": {
                "major": 2,
                "minor": 0,
                "patch": 3
              },
              "description": "TestCase declares a bad suite method \r\nTestCase has no tests\r\nTestCase defines setUp that doesn\u0027t call super.setUp()\r\nTestCase implements a non-static suite method \r\nTestCase defines tearDown that doesn\u0027t call super.tearDown()\r\n",
              "isActive": false,
              "properties": [
                
              ],
              "cwe": 0
            },
            {
              "code": "FindPuzzlers",
              "name": "edu.umd.cs.findbugs.detect.FindPuzzlers",
              "severity": {
                "name": "critical",
                "level": "ERROR",
                "code": "CRI"
              },
              "version": {
                "major": 2,
                "minor": 0,
                "patch": 3
              },
              "description": "Primitive value is boxed and then immediately unboxed\r\nPrimitive value is boxed then unboxed to perform primitive coercion\r\nPrimitive value is unboxed and coerced for ternary operator\r\nBoxed value is unboxed and then immediately reboxed\r\ncompareTo()/compare() returns Integer.MIN_VALUE\r\nUseless assignment in return statement\r\nOverwritten increment\r\nBad constant value for month\r\nAdding elements of an entry set may fail due to reuse of Entry objects\r\nInvocation of hashCode on an array\r\nInvocation of toString on an unnamed array\r\nInvocation of toString on an array\r\nInvocation of equals() on an array, which is equivalent to \u003d\u003d\r\n32 bit int shifted by an amount not in the range -31..31\r\nResult of integer multiplication cast to long\r\nUnsigned right shift cast to short/byte\r\nSuperclass uses subclass during initialization\r\nJUnit assertion in run method will not be noticed by JUnit\r\nComputation of average could overflow\r\nCheck for oddness that won\u0027t work for negative numbers \r\nInteger multiply of result of integer remainder\r\nDon\u0027t reuse entry objects in iterators\r\nNegating the result of compareTo()/compare()\r\n",
              "isActive": true,
              "properties": [
                
              ],
              "cwe": 0
            }
          ],
          "filters": [
            
          ]
        },
        {
          "code": "JCIP",
          "name": "JCIP",
          "description": "Fields of immutable classes should be final",
          "isActive": true,
          "checkerList": [
            {
              "code": "CheckImmutableAnnotation",
              "name": "edu.umd.cs.findbugs.detect.CheckImmutableAnnotation",
              "severity": {
                "name": "info",
                "level": "INFO",
                "code": "ETC"
              },
              "version": {
                "major": 2,
                "minor": 0,
                "patch": 3
              },
              "description": "Fields of immutable classes should be final\r\n",
              "isActive": false,
              "properties": [
                
              ],
              "cwe": 0
            }
          ],
          "filters": [
            
          ]
        },
        {
          "code": "RE",
          "name": "RE",
          "description": "Invalid syntax for regular expression",
          "isActive": true,
          "checkerList": [
            {
              "code": "BadSyntaxForRegularExpression",
              "name": "edu.umd.cs.findbugs.detect.BadSyntaxForRegularExpression",
              "severity": {
                "name": "info",
                "level": "INFO",
                "code": "ETC"
              },
              "version": {
                "major": 2,
                "minor": 0,
                "patch": 3
              },
              "description": "Invalid syntax for regular expression\r\nFile.separator used for regular expression\r\n\".\" or \"|\" used for regular expression\r\n",
              "isActive": false,
              "properties": [
                
              ],
              "cwe": 0
            }
          ],
          "filters": [
            
          ]
        },
        {
          "code": "WMI",
          "name": "WMI",
          "description": "Inefficient use of keySet iterator instead of entrySet iterator",
          "isActive": true,
          "checkerList": [
            {
              "code": "WrongMapIterator",
              "name": "edu.umd.cs.findbugs.detect.WrongMapIterator",
              "severity": {
                "name": "info",
                "level": "INFO",
                "code": "ETC"
              },
              "version": {
                "major": 2,
                "minor": 0,
                "patch": 3
              },
              "description": "Inefficient use of keySet iterator instead of entrySet iterator\r\n",
              "isActive": true,
              "properties": [
                
              ],
              "cwe": 0
            }
          ],
          "filters": [
            
          ]
        },
        {
          "code": "EI2",
          "name": "EI2",
          "description": "May expose internal representation by incorporating reference to mutable object",
          "isActive": true,
          "checkerList": [
            {
              "code": "FindReturnRef",
              "name": "edu.umd.cs.findbugs.detect.FindReturnRef",
              "severity": {
                "name": "info",
                "level": "INFO",
                "code": "ETC"
              },
              "version": {
                "major": 2,
                "minor": 0,
                "patch": 3
              },
              "description": "May expose internal representation by returning reference to mutable object\r\nMay expose internal representation by incorporating reference to mutable object\r\nMay expose internal static state by storing a mutable object into a static field\r\nPublic static method may expose internal representation by returning array\r\n",
              "isActive": true,
              "properties": [
                
              ],
              "cwe": 0
            }
          ],
          "filters": [
            
          ]
        },
        {
          "code": "RI",
          "name": "RI",
          "description": "Class implements same interface as superclass",
          "isActive": true,
          "checkerList": [
            {
              "code": "RedundantInterfaces",
              "name": "edu.umd.cs.findbugs.detect.RedundantInterfaces",
              "severity": {
                "name": "info",
                "level": "INFO",
                "code": "ETC"
              },
              "version": {
                "major": 2,
                "minor": 0,
                "patch": 3
              },
              "description": "Class implements same interface as superclass\r\n",
              "isActive": false,
              "properties": [
                
              ],
              "cwe": 0
            }
          ],
          "filters": [
            
          ]
        },
        {
          "code": "It",
          "name": "It",
          "description": "Iterator next() method can\u0027t throw NoSuchElementException",
          "isActive": true,
          "checkerList": [
            {
              "code": "IteratorIdioms",
              "name": "edu.umd.cs.findbugs.detect.IteratorIdioms",
              "severity": {
                "name": "major",
                "level": "WARN",
                "code": "MAJ"
              },
              "version": {
                "major": 2,
                "minor": 0,
                "patch": 3
              },
              "description": "Iterator next() method can\u0027t throw NoSuchElementException\r\n",
              "isActive": true,
              "properties": [
                
              ],
              "cwe": 0
            }
          ],
          "filters": [
            
          ]
        },
        {
          "code": "RR",
          "name": "RR",
          "description": "Method ignores results of InputStream.read()",
          "isActive": true,
          "checkerList": [
            {
              "code": "ReadReturnShouldBeChecked",
              "name": "edu.umd.cs.findbugs.detect.ReadReturnShouldBeChecked",
              "severity": {
                "name": "info",
                "level": "INFO",
                "code": "ETC"
              },
              "version": {
                "major": 2,
                "minor": 0,
                "patch": 3
              },
              "description": "Method ignores results of InputStream.read()\r\nMethod ignores results of InputStream.skip()\r\n",
              "isActive": false,
              "properties": [
                
              ],
              "cwe": 0
            }
          ],
          "filters": [
            
          ]
        },
        {
          "code": "UuF",
          "name": "UuF",
          "description": "Unused field",
          "isActive": true,
          "checkerList": [
            {
              "code": "UnreadFields",
              "name": "edu.umd.cs.findbugs.detect.UnreadFields",
              "severity": {
                "name": "major",
                "level": "WARN",
                "code": "MAJ"
              },
              "version": {
                "major": 2,
                "minor": 0,
                "patch": 3
              },
              "description": "Read of unwritten field\r\nRead of unwritten public or protected field\r\nShould be a static inner class\r\nCould be refactored into a named static inner class\r\nCould be refactored into a static inner class\r\nDeadly embrace of non-static inner class and thread local\r\nUnread field: should this field be static?\r\nWrite to static field from instance method\r\nUnread field\r\nUnread public/protected field\r\nUnused field\r\nUnused public or protected field\r\nField not initialized in constructor but dereferenced without null check\r\nField only ever set to null\r\nUnwritten field\r\nUnwritten public or protected field\r\n",
              "isActive": true,
              "properties": [
                
              ],
              "cwe": 0
            }
          ],
          "filters": [
            
          ]
        },
        {
          "code": "RCN",
          "name": "RCN",
          "description": "Redundant comparison of non-null value to null",
          "isActive": true,
          "checkerList": [
            {
              "code": "FindNullDeref",
              "name": "edu.umd.cs.findbugs.detect.FindNullDeref",
              "severity": {
                "name": "critical",
                "level": "ERROR",
                "code": "CRI"
              },
              "version": {
                "major": 2,
                "minor": 0,
                "patch": 3
              },
              "description": "Null pointer dereference\r\nNull pointer dereference in method on exception path\r\nMethod does not check for null argument\r\nClone method may return null\r\nclose() invoked on a value that is always null\r\nDereference of the result of readLine() without nullcheck\r\nequals() method does not check for null argument\r\nNull value is guaranteed to be dereferenced\r\nValue is null and guaranteed to be dereferenced on exception path\r\nMethod call passes null to a nonnull parameter \r\nMethod may return null, but is declared @NonNull\r\nPossible null pointer dereference\r\nPossible null pointer dereference in method on exception path\r\nPossible null pointer dereference due to return value of called method\r\nPossible null pointer dereference on branch that might be infeasible\r\nMethod call passes null for nonnull parameter\r\nMethod call passes null for nonnull parameter\r\nNon-virtual method call passes null for nonnull parameter\r\nStore of null value into field annotated NonNull\r\ntoString method may return null\r\nRedundant comparison of non-null value to null\r\nRedundant comparison of two null values\r\nRedundant nullcheck of value known to be non-null\r\nRedundant nullcheck of value known to be null\r\nNullcheck of value previously dereferenced\r\n",
              "isActive": true,
              "properties": [
                
              ],
              "cwe": 0
            }
          ],
          "filters": [
            
          ]
        },
        {
          "code": "BC",
          "name": "BC",
          "description": "Equals method should not assume anything about the type of its argument",
          "isActive": true,
          "checkerList": [
            {
              "code": "DumbMethods",
              "name": "edu.umd.cs.findbugs.detect.DumbMethods",
              "severity": {
                "name": "info",
                "level": "INFO",
                "code": "ETC"
              },
              "version": {
                "major": 2,
                "minor": 0,
                "patch": 3
              },
              "description": "Equals method should not assume anything about the type of its argument\r\nBitwise add of signed byte value\r\nBitwise OR of signed byte value\r\nCan\u0027t use reflection to check for presence of annotation without runtime retention\r\nReversed method arguments\r\nBigDecimal constructed from double that isn\u0027t represented precisely\r\nhasNext method invokes next\r\nMaps and sets of URLs can be performance hogs\r\nD\u0027oh! A nonsensical method invocation\r\nFutile attempt to change max pool size of ScheduledThreadPoolExecutor\r\nDouble.longBitsToDouble invoked on an int\r\nRandom object created and used only once\r\nCreation of ScheduledThreadPoolExecutor with zero core threads\r\nThread passed where Runnable expected\r\nUseless/vacuous call to EasyMock method\r\nMethod invokes inefficient Boolean constructor; use Boolean.valueOf(...) instead\r\nBoxing/unboxing to parse a primitive\r\nMethod allocates a boxed primitive just to call toString\r\nConsider using Locale parameterized version of invoked method\r\nMethod invokes System.exit(...)\r\nExplicit garbage collection; extremely dubious except in benchmarking code\r\nMonitor wait() called on Condition\r\nMethod allocates an object, only to get the class object\r\nUse the nextInt method of Random rather than nextDouble to generate a random integer\r\nMethod invokes dangerous method runFinalizersOnExit\r\nMethod invokes inefficient new String(String) constructor\r\nMethod invokes toString() method on a String\r\nMethod invokes inefficient new String() constructor\r\nA thread was created using the default empty run method\r\nBad comparison of int value with long constant\r\nBad comparison of nonnegative value with negative constant\r\nBad comparison of signed byte\r\nInteger remainder modulo 1\r\nVacuous bit mask operation on integer value\r\nVacuous comparison of integer value\r\nImmediate dereference of the result of readLine()\r\nRandom value from 0 to 1 is coerced to the integer 0\r\nBad attempt to compute absolute value of signed 32-bit hashcode \r\nBad attempt to compute absolute value of signed random integer\r\nRemainder of hashCode could be negative\r\nRemainder of 32-bit signed random integer\r\nCertain swing methods needs to be invoked in Swing thread\r\n",
              "isActive": false,
              "properties": [
                
              ],
              "cwe": 0
            },
            {
              "code": "FindBadCast2",
              "name": "edu.umd.cs.findbugs.detect.FindBadCast2",
              "severity": {
                "name": "info",
                "level": "INFO",
                "code": "ETC"
              },
              "version": {
                "major": 2,
                "minor": 0,
                "patch": 3
              },
              "description": "Questionable cast to abstract collection \r\nQuestionable cast to concrete collection\r\nImpossible cast\r\nImpossible downcast\r\nImpossible downcast of toArray() result\r\ninstanceof will always return false\r\nUnchecked/unconfirmed cast\r\nUnchecked/unconfirmed cast of return value from method\r\ninstanceof will always return true\r\nA known null value is checked to see if it is an instance of a type\r\n",
              "isActive": false,
              "properties": [
                
              ],
              "cwe": 0
            }
          ],
          "filters": [
            
          ]
        }
      ],
      "filters": [
        
      ]
    }
  ],
  "checkerPropertyTypeList": [
    
  ],
  "checkerSeverityList": [
    {
      "name": "critical",
      "level": "ERROR",
      "code": "CRI"
    },
    {
      "name": "major",
      "level": "WARN",
      "code": "MAJ"
    },
    {
      "name": "minor",
      "level": "WARN",
      "code": "MIN"
    },
    {
      "name": "crc",
      "level": "WARN",
      "code": "CRC"
    },
    {
      "name": "info",
      "level": "INFO",
      "code": "ETC"
    }
  ],
  "toolName": "findbugs",
  "language": "JAVA"
}